{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useFirestore.js\nimport { useState, useEffect } from 'react';\nimport { clientService, subscriptionService, invoiceService, seedService } from '../services/firestore';\n\n/**\r\n * Hook personalizado para gerenciar operações do Firestore\r\n * Fornece estado reativo e funções para CRUD de todas as entidades\r\n */\nexport const useFirestore = () => {\n  _s();\n  // Estados\n  const [clients, setClients] = useState([]);\n  const [subscriptions, setSubscriptions] = useState([]);\n  const [invoices, setInvoices] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Função para verificar se data está vencida\n  const isOverdue = dueDate => {\n    const today = new Date();\n    const due = dueDate.toDate ? dueDate.toDate() : new Date(dueDate);\n    return due < today;\n  };\n\n  // Subscrições em tempo real\n  useEffect(() => {\n    console.log('🔄 Iniciando subscrições do Firestore...');\n\n    // Subscrição para clientes\n    const unsubscribeClients = clientService.subscribe(data => {\n      console.log('✅ Clientes atualizados:', data.length);\n      setClients(data);\n    });\n\n    // Subscrição para assinaturas\n    const unsubscribeSubscriptions = subscriptionService.subscribe(data => {\n      console.log('✅ Assinaturas atualizadas:', data.length);\n      setSubscriptions(data);\n    });\n\n    // Subscrição para faturas\n    const unsubscribeInvoices = invoiceService.subscribe(data => {\n      console.log('✅ Faturas atualizadas:', data.length);\n      // Atualizar status das faturas vencidas\n      const updatedInvoices = data.map(invoice => {\n        return {\n          ...invoice,\n          status: invoice.status === 'pending' && isOverdue(invoice.dueDate) ? 'overdue' : invoice.status\n        };\n      });\n      setInvoices(updatedInvoices);\n    });\n\n    // Cleanup das subscrições\n    return () => {\n      console.log('🔄 Limpando subscrições do Firestore...');\n      unsubscribeClients();\n      unsubscribeSubscriptions();\n      unsubscribeInvoices();\n    };\n  }, []);\n\n  // =================== FUNÇÕES DE CLIENTES ===================\n\n  const createClient = async clientData => {\n    setLoading(true);\n    setError(null);\n    try {\n      var _clientData$name, _clientData$email, _clientData$phone, _clientData$company, _clientData$address;\n      const newClient = {\n        name: (_clientData$name = clientData.name) === null || _clientData$name === void 0 ? void 0 : _clientData$name.trim(),\n        email: (_clientData$email = clientData.email) === null || _clientData$email === void 0 ? void 0 : _clientData$email.trim().toLowerCase(),\n        phone: (_clientData$phone = clientData.phone) === null || _clientData$phone === void 0 ? void 0 : _clientData$phone.trim(),\n        company: ((_clientData$company = clientData.company) === null || _clientData$company === void 0 ? void 0 : _clientData$company.trim()) || '',\n        address: ((_clientData$address = clientData.address) === null || _clientData$address === void 0 ? void 0 : _clientData$address.trim()) || ''\n      };\n      await clientService.create(newClient);\n      console.log('✅ Cliente criado com sucesso');\n    } catch (error) {\n      console.error('❌ Erro ao criar cliente:', error);\n      setError(error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const updateClient = async (clientId, clientData) => {\n    setLoading(true);\n    setError(null);\n    try {\n      var _clientData$name2, _clientData$email2, _clientData$phone2, _clientData$company2, _clientData$address2;\n      const updatedClient = {\n        name: (_clientData$name2 = clientData.name) === null || _clientData$name2 === void 0 ? void 0 : _clientData$name2.trim(),\n        email: (_clientData$email2 = clientData.email) === null || _clientData$email2 === void 0 ? void 0 : _clientData$email2.trim().toLowerCase(),\n        phone: (_clientData$phone2 = clientData.phone) === null || _clientData$phone2 === void 0 ? void 0 : _clientData$phone2.trim(),\n        company: ((_clientData$company2 = clientData.company) === null || _clientData$company2 === void 0 ? void 0 : _clientData$company2.trim()) || '',\n        address: ((_clientData$address2 = clientData.address) === null || _clientData$address2 === void 0 ? void 0 : _clientData$address2.trim()) || ''\n      };\n      await clientService.update(clientId, updatedClient);\n      console.log('✅ Cliente atualizado com sucesso');\n    } catch (error) {\n      console.error('❌ Erro ao atualizar cliente:', error);\n      setError(error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const deleteClient = async clientId => {\n    setLoading(true);\n    setError(null);\n    try {\n      await clientService.delete(clientId);\n      console.log('✅ Cliente deletado com sucesso');\n    } catch (error) {\n      console.error('❌ Erro ao deletar cliente:', error);\n      setError(error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // =================== FUNÇÕES DE ASSINATURAS ===================\n\n  const createSubscription = async subscriptionData => {\n    setLoading(true);\n    setError(null);\n    try {\n      var _subscriptionData$ser, _subscriptionData$des;\n      const newSubscription = {\n        clientId: subscriptionData.clientId,\n        service: (_subscriptionData$ser = subscriptionData.service) === null || _subscriptionData$ser === void 0 ? void 0 : _subscriptionData$ser.trim(),\n        description: ((_subscriptionData$des = subscriptionData.description) === null || _subscriptionData$des === void 0 ? void 0 : _subscriptionData$des.trim()) || '',\n        amount: parseFloat(subscriptionData.amount),\n        billingCycle: subscriptionData.billingCycle,\n        startDate: new Date(subscriptionData.startDate),\n        status: subscriptionData.status || 'active',\n        billingDay: parseInt(subscriptionData.billingDay) || 5\n      };\n      await subscriptionService.create(newSubscription);\n      console.log('✅ Assinatura criada com sucesso');\n    } catch (error) {\n      console.error('❌ Erro ao criar assinatura:', error);\n      setError(error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const updateSubscription = async (subscriptionId, subscriptionData) => {\n    setLoading(true);\n    setError(null);\n    try {\n      var _subscriptionData$ser2, _subscriptionData$des2;\n      const updatedSubscription = {\n        service: (_subscriptionData$ser2 = subscriptionData.service) === null || _subscriptionData$ser2 === void 0 ? void 0 : _subscriptionData$ser2.trim(),\n        description: ((_subscriptionData$des2 = subscriptionData.description) === null || _subscriptionData$des2 === void 0 ? void 0 : _subscriptionData$des2.trim()) || '',\n        amount: parseFloat(subscriptionData.amount),\n        billingCycle: subscriptionData.billingCycle,\n        status: subscriptionData.status,\n        billingDay: parseInt(subscriptionData.billingDay) || 5\n      };\n      await subscriptionService.update(subscriptionId, updatedSubscription);\n      console.log('✅ Assinatura atualizada com sucesso');\n    } catch (error) {\n      console.error('❌ Erro ao atualizar assinatura:', error);\n      setError(error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const deleteSubscription = async subscriptionId => {\n    setLoading(true);\n    setError(null);\n    try {\n      await subscriptionService.delete(subscriptionId);\n      console.log('✅ Assinatura deletada com sucesso');\n    } catch (error) {\n      console.error('❌ Erro ao deletar assinatura:', error);\n      setError(error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // =================== FUNÇÕES DE FATURAS ===================\n\n  const createInvoice = async invoiceData => {\n    setLoading(true);\n    setError(null);\n    try {\n      var _invoiceData$descript;\n      const newInvoice = {\n        clientId: invoiceData.clientId,\n        subscriptionId: invoiceData.subscriptionId || null,\n        amount: parseFloat(invoiceData.amount),\n        description: (_invoiceData$descript = invoiceData.description) === null || _invoiceData$descript === void 0 ? void 0 : _invoiceData$descript.trim(),\n        dueDate: new Date(invoiceData.dueDate),\n        status: invoiceData.status || 'pending',\n        month: invoiceData.month || new Date().getMonth(),\n        year: invoiceData.year || new Date().getFullYear()\n      };\n      await invoiceService.create(newInvoice);\n      console.log('✅ Fatura criada com sucesso');\n    } catch (error) {\n      console.error('❌ Erro ao criar fatura:', error);\n      setError(error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const updateInvoice = async (invoiceId, invoiceData) => {\n    setLoading(true);\n    setError(null);\n    try {\n      var _invoiceData$descript2;\n      const updatedInvoice = {\n        amount: parseFloat(invoiceData.amount),\n        description: (_invoiceData$descript2 = invoiceData.description) === null || _invoiceData$descript2 === void 0 ? void 0 : _invoiceData$descript2.trim(),\n        dueDate: new Date(invoiceData.dueDate),\n        status: invoiceData.status\n      };\n      await invoiceService.update(invoiceId, updatedInvoice);\n      console.log('✅ Fatura atualizada com sucesso');\n    } catch (error) {\n      console.error('❌ Erro ao atualizar fatura:', error);\n      setError(error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const deleteInvoice = async invoiceId => {\n    setLoading(true);\n    setError(null);\n    try {\n      await invoiceService.delete(invoiceId);\n      console.log('✅ Fatura deletada com sucesso');\n    } catch (error) {\n      console.error('❌ Erro ao deletar fatura:', error);\n      setError(error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const markAsPaid = async invoiceId => {\n    setLoading(true);\n    setError(null);\n    try {\n      await invoiceService.markAsPaid(invoiceId);\n      console.log('✅ Fatura marcada como paga');\n    } catch (error) {\n      console.error('❌ Erro ao marcar fatura como paga:', error);\n      setError(error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // =================== FUNÇÕES AUXILIARES ===================\n\n  const getInvoicesByDateRange = async (startDate, endDate) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const invoices = await invoiceService.getByPeriod(startDate, endDate);\n      console.log('✅ Faturas por período carregadas:', invoices.length);\n      return invoices;\n    } catch (error) {\n      console.error('❌ Erro ao carregar faturas por período:', error);\n      setError(error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const generateMonthlyInvoices = async (month, year) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const count = await invoiceService.generateForMonth(month, year);\n      console.log(`✅ ${count} faturas geradas para ${month + 1}/${year}`);\n      return count;\n    } catch (error) {\n      console.error('❌ Erro ao gerar faturas mensais:', error);\n      setError(error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const createExampleData = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const result = await seedService.createSampleData();\n      console.log('✅ Dados de exemplo criados:', result);\n      return result;\n    } catch (error) {\n      console.error('❌ Erro ao criar dados de exemplo:', error);\n      setError(error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // =================== GETTERS COMPUTADOS ===================\n\n  // Buscar cliente por ID\n  const getClientById = clientId => {\n    return clients.find(client => client.id === clientId);\n  };\n\n  // Buscar assinaturas por cliente\n  const getSubscriptionsByClientId = clientId => {\n    return subscriptions.filter(sub => sub.clientId === clientId);\n  };\n\n  // Buscar faturas por cliente\n  const getInvoicesByClientId = clientId => {\n    return invoices.filter(invoice => invoice.clientId === clientId);\n  };\n\n  // Estatísticas\n  const getStats = () => {\n    const totalClients = clients.length;\n    const activeSubscriptions = subscriptions.filter(sub => sub.status === 'active').length;\n    const pendingInvoices = invoices.filter(invoice => invoice.status === 'pending').length;\n    const overdueInvoices = invoices.filter(invoice => invoice.status === 'overdue').length;\n    const totalRevenue = invoices.filter(invoice => invoice.status === 'paid').reduce((sum, invoice) => sum + (invoice.amount || 0), 0);\n    const pendingRevenue = invoices.filter(invoice => invoice.status === 'pending').reduce((sum, invoice) => sum + (invoice.amount || 0), 0);\n    return {\n      totalClients,\n      activeSubscriptions,\n      pendingInvoices,\n      overdueInvoices,\n      totalRevenue,\n      pendingRevenue\n    };\n  };\n\n  // Retornar todas as funções e dados\n  return {\n    // Estados\n    clients,\n    subscriptions,\n    invoices,\n    loading,\n    error,\n    // Funções de clientes\n    createClient,\n    updateClient,\n    deleteClient,\n    // Funções de assinaturas\n    createSubscription,\n    updateSubscription,\n    deleteSubscription,\n    // Funções de faturas\n    createInvoice,\n    updateInvoice,\n    deleteInvoice,\n    markAsPaid,\n    // Funções auxiliares\n    getInvoicesByDateRange,\n    generateMonthlyInvoices,\n    createExampleData,\n    // Getters\n    getClientById,\n    getSubscriptionsByClientId,\n    getInvoicesByClientId,\n    getStats\n  };\n};\n_s(useFirestore, \"4DNarF0y4OC9iGEF1lZCTJpRQnA=\");","map":{"version":3,"names":["useState","useEffect","clientService","subscriptionService","invoiceService","seedService","useFirestore","_s","clients","setClients","subscriptions","setSubscriptions","invoices","setInvoices","loading","setLoading","error","setError","isOverdue","dueDate","today","Date","due","toDate","console","log","unsubscribeClients","subscribe","data","length","unsubscribeSubscriptions","unsubscribeInvoices","updatedInvoices","map","invoice","status","createClient","clientData","_clientData$name","_clientData$email","_clientData$phone","_clientData$company","_clientData$address","newClient","name","trim","email","toLowerCase","phone","company","address","create","updateClient","clientId","_clientData$name2","_clientData$email2","_clientData$phone2","_clientData$company2","_clientData$address2","updatedClient","update","deleteClient","delete","createSubscription","subscriptionData","_subscriptionData$ser","_subscriptionData$des","newSubscription","service","description","amount","parseFloat","billingCycle","startDate","billingDay","parseInt","updateSubscription","subscriptionId","_subscriptionData$ser2","_subscriptionData$des2","updatedSubscription","deleteSubscription","createInvoice","invoiceData","_invoiceData$descript","newInvoice","month","getMonth","year","getFullYear","updateInvoice","invoiceId","_invoiceData$descript2","updatedInvoice","deleteInvoice","markAsPaid","getInvoicesByDateRange","endDate","getByPeriod","generateMonthlyInvoices","count","generateForMonth","createExampleData","result","createSampleData","getClientById","find","client","id","getSubscriptionsByClientId","filter","sub","getInvoicesByClientId","getStats","totalClients","activeSubscriptions","pendingInvoices","overdueInvoices","totalRevenue","reduce","sum","pendingRevenue"],"sources":["C:/Users/LEVI/Desktop/Gestao-de-cobrancas/src/hooks/useFirestore.js"],"sourcesContent":["// src/hooks/useFirestore.js\r\nimport { useState, useEffect } from 'react';\r\nimport { \r\n  clientService,\r\n  subscriptionService,\r\n  invoiceService,\r\n  seedService\r\n} from '../services/firestore';\r\n\r\n/**\r\n * Hook personalizado para gerenciar operações do Firestore\r\n * Fornece estado reativo e funções para CRUD de todas as entidades\r\n */\r\nexport const useFirestore = () => {\r\n  // Estados\r\n  const [clients, setClients] = useState([]);\r\n  const [subscriptions, setSubscriptions] = useState([]);\r\n  const [invoices, setInvoices] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Função para verificar se data está vencida\r\n  const isOverdue = (dueDate) => {\r\n    const today = new Date();\r\n    const due = dueDate.toDate ? dueDate.toDate() : new Date(dueDate);\r\n    return due < today;\r\n  };\r\n\r\n  // Subscrições em tempo real\r\n  useEffect(() => {\r\n    console.log('🔄 Iniciando subscrições do Firestore...');\r\n    \r\n    // Subscrição para clientes\r\n    const unsubscribeClients = clientService.subscribe((data) => {\r\n      console.log('✅ Clientes atualizados:', data.length);\r\n      setClients(data);\r\n    });\r\n\r\n    // Subscrição para assinaturas\r\n    const unsubscribeSubscriptions = subscriptionService.subscribe((data) => {\r\n      console.log('✅ Assinaturas atualizadas:', data.length);\r\n      setSubscriptions(data);\r\n    });\r\n\r\n    // Subscrição para faturas\r\n    const unsubscribeInvoices = invoiceService.subscribe((data) => {\r\n      console.log('✅ Faturas atualizadas:', data.length);\r\n      // Atualizar status das faturas vencidas\r\n      const updatedInvoices = data.map(invoice => {\r\n        return {\r\n          ...invoice,\r\n          status: invoice.status === 'pending' && isOverdue(invoice.dueDate) \r\n            ? 'overdue' \r\n            : invoice.status\r\n        };\r\n      });\r\n      setInvoices(updatedInvoices);\r\n    });\r\n\r\n    // Cleanup das subscrições\r\n    return () => {\r\n      console.log('🔄 Limpando subscrições do Firestore...');\r\n      unsubscribeClients();\r\n      unsubscribeSubscriptions();\r\n      unsubscribeInvoices();\r\n    };\r\n  }, []);\r\n\r\n  // =================== FUNÇÕES DE CLIENTES ===================\r\n\r\n  const createClient = async (clientData) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const newClient = {\r\n        name: clientData.name?.trim(),\r\n        email: clientData.email?.trim().toLowerCase(),\r\n        phone: clientData.phone?.trim(),\r\n        company: clientData.company?.trim() || '',\r\n        address: clientData.address?.trim() || ''\r\n      };\r\n      await clientService.create(newClient);\r\n      console.log('✅ Cliente criado com sucesso');\r\n    } catch (error) {\r\n      console.error('❌ Erro ao criar cliente:', error);\r\n      setError(error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const updateClient = async (clientId, clientData) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const updatedClient = {\r\n        name: clientData.name?.trim(),\r\n        email: clientData.email?.trim().toLowerCase(),\r\n        phone: clientData.phone?.trim(),\r\n        company: clientData.company?.trim() || '',\r\n        address: clientData.address?.trim() || ''\r\n      };\r\n      await clientService.update(clientId, updatedClient);\r\n      console.log('✅ Cliente atualizado com sucesso');\r\n    } catch (error) {\r\n      console.error('❌ Erro ao atualizar cliente:', error);\r\n      setError(error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const deleteClient = async (clientId) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      await clientService.delete(clientId);\r\n      console.log('✅ Cliente deletado com sucesso');\r\n    } catch (error) {\r\n      console.error('❌ Erro ao deletar cliente:', error);\r\n      setError(error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // =================== FUNÇÕES DE ASSINATURAS ===================\r\n\r\n  const createSubscription = async (subscriptionData) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const newSubscription = {\r\n        clientId: subscriptionData.clientId,\r\n        service: subscriptionData.service?.trim(),\r\n        description: subscriptionData.description?.trim() || '',\r\n        amount: parseFloat(subscriptionData.amount),\r\n        billingCycle: subscriptionData.billingCycle,\r\n        startDate: new Date(subscriptionData.startDate),\r\n        status: subscriptionData.status || 'active',\r\n        billingDay: parseInt(subscriptionData.billingDay) || 5\r\n      };\r\n      await subscriptionService.create(newSubscription);\r\n      console.log('✅ Assinatura criada com sucesso');\r\n    } catch (error) {\r\n      console.error('❌ Erro ao criar assinatura:', error);\r\n      setError(error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const updateSubscription = async (subscriptionId, subscriptionData) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const updatedSubscription = {\r\n        service: subscriptionData.service?.trim(),\r\n        description: subscriptionData.description?.trim() || '',\r\n        amount: parseFloat(subscriptionData.amount),\r\n        billingCycle: subscriptionData.billingCycle,\r\n        status: subscriptionData.status,\r\n        billingDay: parseInt(subscriptionData.billingDay) || 5\r\n      };\r\n      await subscriptionService.update(subscriptionId, updatedSubscription);\r\n      console.log('✅ Assinatura atualizada com sucesso');\r\n    } catch (error) {\r\n      console.error('❌ Erro ao atualizar assinatura:', error);\r\n      setError(error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const deleteSubscription = async (subscriptionId) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      await subscriptionService.delete(subscriptionId);\r\n      console.log('✅ Assinatura deletada com sucesso');\r\n    } catch (error) {\r\n      console.error('❌ Erro ao deletar assinatura:', error);\r\n      setError(error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // =================== FUNÇÕES DE FATURAS ===================\r\n\r\n  const createInvoice = async (invoiceData) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const newInvoice = {\r\n        clientId: invoiceData.clientId,\r\n        subscriptionId: invoiceData.subscriptionId || null,\r\n        amount: parseFloat(invoiceData.amount),\r\n        description: invoiceData.description?.trim(),\r\n        dueDate: new Date(invoiceData.dueDate),\r\n        status: invoiceData.status || 'pending',\r\n        month: invoiceData.month || new Date().getMonth(),\r\n        year: invoiceData.year || new Date().getFullYear()\r\n      };\r\n      await invoiceService.create(newInvoice);\r\n      console.log('✅ Fatura criada com sucesso');\r\n    } catch (error) {\r\n      console.error('❌ Erro ao criar fatura:', error);\r\n      setError(error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const updateInvoice = async (invoiceId, invoiceData) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const updatedInvoice = {\r\n        amount: parseFloat(invoiceData.amount),\r\n        description: invoiceData.description?.trim(),\r\n        dueDate: new Date(invoiceData.dueDate),\r\n        status: invoiceData.status\r\n      };\r\n      await invoiceService.update(invoiceId, updatedInvoice);\r\n      console.log('✅ Fatura atualizada com sucesso');\r\n    } catch (error) {\r\n      console.error('❌ Erro ao atualizar fatura:', error);\r\n      setError(error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const deleteInvoice = async (invoiceId) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      await invoiceService.delete(invoiceId);\r\n      console.log('✅ Fatura deletada com sucesso');\r\n    } catch (error) {\r\n      console.error('❌ Erro ao deletar fatura:', error);\r\n      setError(error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const markAsPaid = async (invoiceId) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      await invoiceService.markAsPaid(invoiceId);\r\n      console.log('✅ Fatura marcada como paga');\r\n    } catch (error) {\r\n      console.error('❌ Erro ao marcar fatura como paga:', error);\r\n      setError(error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // =================== FUNÇÕES AUXILIARES ===================\r\n\r\n  const getInvoicesByDateRange = async (startDate, endDate) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const invoices = await invoiceService.getByPeriod(startDate, endDate);\r\n      console.log('✅ Faturas por período carregadas:', invoices.length);\r\n      return invoices;\r\n    } catch (error) {\r\n      console.error('❌ Erro ao carregar faturas por período:', error);\r\n      setError(error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const generateMonthlyInvoices = async (month, year) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const count = await invoiceService.generateForMonth(month, year);\r\n      console.log(`✅ ${count} faturas geradas para ${month + 1}/${year}`);\r\n      return count;\r\n    } catch (error) {\r\n      console.error('❌ Erro ao gerar faturas mensais:', error);\r\n      setError(error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const createExampleData = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const result = await seedService.createSampleData();\r\n      console.log('✅ Dados de exemplo criados:', result);\r\n      return result;\r\n    } catch (error) {\r\n      console.error('❌ Erro ao criar dados de exemplo:', error);\r\n      setError(error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // =================== GETTERS COMPUTADOS ===================\r\n\r\n  // Buscar cliente por ID\r\n  const getClientById = (clientId) => {\r\n    return clients.find(client => client.id === clientId);\r\n  };\r\n\r\n  // Buscar assinaturas por cliente\r\n  const getSubscriptionsByClientId = (clientId) => {\r\n    return subscriptions.filter(sub => sub.clientId === clientId);\r\n  };\r\n\r\n  // Buscar faturas por cliente\r\n  const getInvoicesByClientId = (clientId) => {\r\n    return invoices.filter(invoice => invoice.clientId === clientId);\r\n  };\r\n\r\n  // Estatísticas\r\n  const getStats = () => {\r\n    const totalClients = clients.length;\r\n    const activeSubscriptions = subscriptions.filter(sub => sub.status === 'active').length;\r\n    const pendingInvoices = invoices.filter(invoice => invoice.status === 'pending').length;\r\n    const overdueInvoices = invoices.filter(invoice => invoice.status === 'overdue').length;\r\n    const totalRevenue = invoices\r\n      .filter(invoice => invoice.status === 'paid')\r\n      .reduce((sum, invoice) => sum + (invoice.amount || 0), 0);\r\n    const pendingRevenue = invoices\r\n      .filter(invoice => invoice.status === 'pending')\r\n      .reduce((sum, invoice) => sum + (invoice.amount || 0), 0);\r\n\r\n    return {\r\n      totalClients,\r\n      activeSubscriptions,\r\n      pendingInvoices,\r\n      overdueInvoices,\r\n      totalRevenue,\r\n      pendingRevenue\r\n    };\r\n  };\r\n\r\n  // Retornar todas as funções e dados\r\n  return {\r\n    // Estados\r\n    clients,\r\n    subscriptions,\r\n    invoices,\r\n    loading,\r\n    error,\r\n\r\n    // Funções de clientes\r\n    createClient,\r\n    updateClient,\r\n    deleteClient,\r\n\r\n    // Funções de assinaturas\r\n    createSubscription,\r\n    updateSubscription,\r\n    deleteSubscription,\r\n\r\n    // Funções de faturas\r\n    createInvoice,\r\n    updateInvoice,\r\n    deleteInvoice,\r\n    markAsPaid,\r\n\r\n    // Funções auxiliares\r\n    getInvoicesByDateRange,\r\n    generateMonthlyInvoices,\r\n    createExampleData,\r\n\r\n    // Getters\r\n    getClientById,\r\n    getSubscriptionsByClientId,\r\n    getInvoicesByClientId,\r\n    getStats\r\n  };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}