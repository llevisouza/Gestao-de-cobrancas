{"ast":null,"code":"// Funções utilitárias para manipulação de datas\n\nexport const startOfMonth = date => {\n  return new Date(date.getFullYear(), date.getMonth(), 1);\n};\nexport const endOfMonth = date => {\n  return new Date(date.getFullYear(), date.getMonth() + 1, 0);\n};\nexport const startOfYear = date => {\n  return new Date(date.getFullYear(), 0, 1);\n};\nexport const endOfYear = date => {\n  return new Date(date.getFullYear(), 11, 31);\n};\nexport const addMonths = (date, months) => {\n  const newDate = new Date(date);\n  newDate.setMonth(newDate.getMonth() + months);\n  return newDate;\n};\nexport const addDays = (date, days) => {\n  const newDate = new Date(date);\n  newDate.setDate(newDate.getDate() + days);\n  return newDate;\n};\nexport const isOverdue = dueDate => {\n  const today = new Date();\n  const due = new Date(dueDate);\n  today.setHours(0, 0, 0, 0);\n  due.setHours(0, 0, 0, 0);\n  return due < today;\n};\nexport const daysBetween = (date1, date2) => {\n  const oneDay = 24 * 60 * 60 * 1000;\n  const firstDate = new Date(date1);\n  const secondDate = new Date(date2);\n  return Math.round(Math.abs((firstDate - secondDate) / oneDay));\n};\nexport const formatDateForInput = date => {\n  if (!date) return '';\n  const d = new Date(date);\n  return d.toISOString().split('T')[0];\n};\nexport const parseDate = dateString => {\n  return new Date(dateString + 'T00:00:00.000Z');\n};","map":{"version":3,"names":["startOfMonth","date","Date","getFullYear","getMonth","endOfMonth","startOfYear","endOfYear","addMonths","months","newDate","setMonth","addDays","days","setDate","getDate","isOverdue","dueDate","today","due","setHours","daysBetween","date1","date2","oneDay","firstDate","secondDate","Math","round","abs","formatDateForInput","d","toISOString","split","parseDate","dateString"],"sources":["C:/Users/LEVI/Desktop/Gestao-de-cobrancas/src/utils/dateUtils.js"],"sourcesContent":["// Funções utilitárias para manipulação de datas\r\n\r\nexport const startOfMonth = (date) => {\r\n  return new Date(date.getFullYear(), date.getMonth(), 1);\r\n};\r\n\r\nexport const endOfMonth = (date) => {\r\n  return new Date(date.getFullYear(), date.getMonth() + 1, 0);\r\n};\r\n\r\nexport const startOfYear = (date) => {\r\n  return new Date(date.getFullYear(), 0, 1);\r\n};\r\n\r\nexport const endOfYear = (date) => {\r\n  return new Date(date.getFullYear(), 11, 31);\r\n};\r\n\r\nexport const addMonths = (date, months) => {\r\n  const newDate = new Date(date);\r\n  newDate.setMonth(newDate.getMonth() + months);\r\n  return newDate;\r\n};\r\n\r\nexport const addDays = (date, days) => {\r\n  const newDate = new Date(date);\r\n  newDate.setDate(newDate.getDate() + days);\r\n  return newDate;\r\n};\r\n\r\nexport const isOverdue = (dueDate) => {\r\n  const today = new Date();\r\n  const due = new Date(dueDate);\r\n  today.setHours(0, 0, 0, 0);\r\n  due.setHours(0, 0, 0, 0);\r\n  return due < today;\r\n};\r\n\r\nexport const daysBetween = (date1, date2) => {\r\n  const oneDay = 24 * 60 * 60 * 1000;\r\n  const firstDate = new Date(date1);\r\n  const secondDate = new Date(date2);\r\n  \r\n  return Math.round(Math.abs((firstDate - secondDate) / oneDay));\r\n};\r\n\r\nexport const formatDateForInput = (date) => {\r\n  if (!date) return '';\r\n  const d = new Date(date);\r\n  return d.toISOString().split('T')[0];\r\n};\r\n\r\nexport const parseDate = (dateString) => {\r\n  return new Date(dateString + 'T00:00:00.000Z');\r\n};"],"mappings":"AAAA;;AAEA,OAAO,MAAMA,YAAY,GAAIC,IAAI,IAAK;EACpC,OAAO,IAAIC,IAAI,CAACD,IAAI,CAACE,WAAW,CAAC,CAAC,EAAEF,IAAI,CAACG,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;AACzD,CAAC;AAED,OAAO,MAAMC,UAAU,GAAIJ,IAAI,IAAK;EAClC,OAAO,IAAIC,IAAI,CAACD,IAAI,CAACE,WAAW,CAAC,CAAC,EAAEF,IAAI,CAACG,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;AAC7D,CAAC;AAED,OAAO,MAAME,WAAW,GAAIL,IAAI,IAAK;EACnC,OAAO,IAAIC,IAAI,CAACD,IAAI,CAACE,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AAC3C,CAAC;AAED,OAAO,MAAMI,SAAS,GAAIN,IAAI,IAAK;EACjC,OAAO,IAAIC,IAAI,CAACD,IAAI,CAACE,WAAW,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC;AAC7C,CAAC;AAED,OAAO,MAAMK,SAAS,GAAGA,CAACP,IAAI,EAAEQ,MAAM,KAAK;EACzC,MAAMC,OAAO,GAAG,IAAIR,IAAI,CAACD,IAAI,CAAC;EAC9BS,OAAO,CAACC,QAAQ,CAACD,OAAO,CAACN,QAAQ,CAAC,CAAC,GAAGK,MAAM,CAAC;EAC7C,OAAOC,OAAO;AAChB,CAAC;AAED,OAAO,MAAME,OAAO,GAAGA,CAACX,IAAI,EAAEY,IAAI,KAAK;EACrC,MAAMH,OAAO,GAAG,IAAIR,IAAI,CAACD,IAAI,CAAC;EAC9BS,OAAO,CAACI,OAAO,CAACJ,OAAO,CAACK,OAAO,CAAC,CAAC,GAAGF,IAAI,CAAC;EACzC,OAAOH,OAAO;AAChB,CAAC;AAED,OAAO,MAAMM,SAAS,GAAIC,OAAO,IAAK;EACpC,MAAMC,KAAK,GAAG,IAAIhB,IAAI,CAAC,CAAC;EACxB,MAAMiB,GAAG,GAAG,IAAIjB,IAAI,CAACe,OAAO,CAAC;EAC7BC,KAAK,CAACE,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAC1BD,GAAG,CAACC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACxB,OAAOD,GAAG,GAAGD,KAAK;AACpB,CAAC;AAED,OAAO,MAAMG,WAAW,GAAGA,CAACC,KAAK,EAAEC,KAAK,KAAK;EAC3C,MAAMC,MAAM,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;EAClC,MAAMC,SAAS,GAAG,IAAIvB,IAAI,CAACoB,KAAK,CAAC;EACjC,MAAMI,UAAU,GAAG,IAAIxB,IAAI,CAACqB,KAAK,CAAC;EAElC,OAAOI,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,GAAG,CAAC,CAACJ,SAAS,GAAGC,UAAU,IAAIF,MAAM,CAAC,CAAC;AAChE,CAAC;AAED,OAAO,MAAMM,kBAAkB,GAAI7B,IAAI,IAAK;EAC1C,IAAI,CAACA,IAAI,EAAE,OAAO,EAAE;EACpB,MAAM8B,CAAC,GAAG,IAAI7B,IAAI,CAACD,IAAI,CAAC;EACxB,OAAO8B,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC;AAED,OAAO,MAAMC,SAAS,GAAIC,UAAU,IAAK;EACvC,OAAO,IAAIjC,IAAI,CAACiC,UAAU,GAAG,gBAAgB,CAAC;AAChD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}