{"ast":null,"code":"import _objectSpread from\"C:/Users/LEVI/Desktop/Gestao de cobrancas/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// src/services/firestore.js\nimport{collection,addDoc,getDocs,doc,updateDoc,deleteDoc,query,orderBy,where,writeBatch,serverTimestamp}from'firebase/firestore';import{db}from'./firebase';// Constantes das cole√ß√µes\nexport const COLLECTIONS={CLIENTS:'clients',SUBSCRIPTIONS:'subscriptions',INVOICES:'invoices'};// ***** CLIENTES *****\nexport const clientService={// Criar cliente\nasync create(clientData){try{const docRef=await addDoc(collection(db,COLLECTIONS.CLIENTS),_objectSpread(_objectSpread({},clientData),{},{createdAt:serverTimestamp(),updatedAt:serverTimestamp()}));console.log('‚úÖ Cliente criado:',docRef.id);return{success:true,id:docRef.id};}catch(error){console.error('‚ùå Erro ao criar cliente:',error);return{success:false,error:error.message};}},// Listar todos os clientes\nasync getAll(){try{const q=query(collection(db,COLLECTIONS.CLIENTS),orderBy('createdAt','desc'));const querySnapshot=await getDocs(q);const clients=querySnapshot.docs.map(doc=>_objectSpread({id:doc.id},doc.data()));console.log('‚úÖ Clientes carregados:',clients.length);return clients;}catch(error){console.error('‚ùå Erro ao buscar clientes:',error);return[];}},// Atualizar cliente\nasync update(clientId,clientData){try{const clientRef=doc(db,COLLECTIONS.CLIENTS,clientId);await updateDoc(clientRef,_objectSpread(_objectSpread({},clientData),{},{updatedAt:serverTimestamp()}));console.log('‚úÖ Cliente atualizado:',clientId);return{success:true};}catch(error){console.error('‚ùå Erro ao atualizar cliente:',error);return{success:false,error:error.message};}},// Deletar cliente e dados relacionados\nasync delete(clientId){try{const batch=writeBatch(db);// Deletar assinaturas relacionadas\nconst subscriptionsQuery=query(collection(db,COLLECTIONS.SUBSCRIPTIONS),where('clientId','==',clientId));const subscriptionsSnapshot=await getDocs(subscriptionsQuery);subscriptionsSnapshot.docs.forEach(doc=>{batch.delete(doc.ref);});// Deletar faturas relacionadas\nconst invoicesQuery=query(collection(db,COLLECTIONS.INVOICES),where('clientId','==',clientId));const invoicesSnapshot=await getDocs(invoicesQuery);invoicesSnapshot.docs.forEach(doc=>{batch.delete(doc.ref);});// Deletar cliente\nconst clientRef=doc(db,COLLECTIONS.CLIENTS,clientId);batch.delete(clientRef);await batch.commit();console.log('‚úÖ Cliente deletado:',clientId);return{success:true};}catch(error){console.error('‚ùå Erro ao deletar cliente:',error);return{success:false,error:error.message};}}};// ***** ASSINATURAS *****\nexport const subscriptionService={// Criar assinatura\nasync create(subscriptionData){try{const docRef=await addDoc(collection(db,COLLECTIONS.SUBSCRIPTIONS),_objectSpread(_objectSpread({},subscriptionData),{},{createdAt:serverTimestamp(),updatedAt:serverTimestamp()}));console.log('‚úÖ Assinatura criada:',docRef.id);return{success:true,id:docRef.id};}catch(error){console.error('‚ùå Erro ao criar assinatura:',error);return{success:false,error:error.message};}},// Listar todas as assinaturas\nasync getAll(){try{const q=query(collection(db,COLLECTIONS.SUBSCRIPTIONS),orderBy('createdAt','desc'));const querySnapshot=await getDocs(q);const subscriptions=querySnapshot.docs.map(doc=>_objectSpread({id:doc.id},doc.data()));console.log('‚úÖ Assinaturas carregadas:',subscriptions.length);return subscriptions;}catch(error){console.error('‚ùå Erro ao buscar assinaturas:',error);return[];}},// Atualizar assinatura\nasync update(subscriptionId,subscriptionData){try{const subscriptionRef=doc(db,COLLECTIONS.SUBSCRIPTIONS,subscriptionId);await updateDoc(subscriptionRef,_objectSpread(_objectSpread({},subscriptionData),{},{updatedAt:serverTimestamp()}));console.log('‚úÖ Assinatura atualizada:',subscriptionId);return{success:true};}catch(error){console.error('‚ùå Erro ao atualizar assinatura:',error);return{success:false,error:error.message};}}};// ***** FATURAS *****\nexport const invoiceService={// Criar fatura\nasync create(invoiceData){try{const docRef=await addDoc(collection(db,COLLECTIONS.INVOICES),_objectSpread(_objectSpread({},invoiceData),{},{createdAt:serverTimestamp(),updatedAt:serverTimestamp()}));console.log('‚úÖ Fatura criada:',docRef.id);return{success:true,id:docRef.id};}catch(error){console.error('‚ùå Erro ao criar fatura:',error);return{success:false,error:error.message};}},// Listar todas as faturas\nasync getAll(){try{const q=query(collection(db,COLLECTIONS.INVOICES),orderBy('generationDate','desc'));const querySnapshot=await getDocs(q);const invoices=querySnapshot.docs.map(doc=>{var _data$generationDate,_data$generationDate$,_data$dueDate,_data$dueDate$toDate,_data$createdAt,_data$createdAt$toDat,_data$updatedAt,_data$updatedAt$toDat;const data=doc.data();return _objectSpread(_objectSpread({id:doc.id},data),{},{// Converter Timestamps do Firebase para Date\ngenerationDate:((_data$generationDate=data.generationDate)===null||_data$generationDate===void 0?void 0:(_data$generationDate$=_data$generationDate.toDate)===null||_data$generationDate$===void 0?void 0:_data$generationDate$.call(_data$generationDate))||data.generationDate,dueDate:((_data$dueDate=data.dueDate)===null||_data$dueDate===void 0?void 0:(_data$dueDate$toDate=_data$dueDate.toDate)===null||_data$dueDate$toDate===void 0?void 0:_data$dueDate$toDate.call(_data$dueDate))||data.dueDate,createdAt:((_data$createdAt=data.createdAt)===null||_data$createdAt===void 0?void 0:(_data$createdAt$toDat=_data$createdAt.toDate)===null||_data$createdAt$toDat===void 0?void 0:_data$createdAt$toDat.call(_data$createdAt))||data.createdAt,updatedAt:((_data$updatedAt=data.updatedAt)===null||_data$updatedAt===void 0?void 0:(_data$updatedAt$toDat=_data$updatedAt.toDate)===null||_data$updatedAt$toDat===void 0?void 0:_data$updatedAt$toDat.call(_data$updatedAt))||data.updatedAt});});console.log('‚úÖ Faturas carregadas:',invoices.length);return invoices;}catch(error){console.error('‚ùå Erro ao buscar faturas:',error);return[];}},// Atualizar fatura\nasync update(invoiceId,invoiceData){try{const invoiceRef=doc(db,COLLECTIONS.INVOICES,invoiceId);await updateDoc(invoiceRef,_objectSpread(_objectSpread({},invoiceData),{},{updatedAt:serverTimestamp()}));console.log('‚úÖ Fatura atualizada:',invoiceId);return{success:true};}catch(error){console.error('‚ùå Erro ao atualizar fatura:',error);return{success:false,error:error.message};}}};// ***** DADOS DE EXEMPLO *****\nexport const seedService={// Criar dados de exemplo\nasync createSampleData(){try{console.log('üå± Iniciando cria√ß√£o de dados de exemplo...');// Clientes de exemplo\nconst sampleClients=[{name:'Jo√£o da Silva',email:'joao@email.com',phone:'(11) 99999-1111',cpf:'123.456.789-00',pix:'joao@email.com'},{name:'Maria Santos',email:'maria@email.com',phone:'(11) 99999-2222',cpf:'987.654.321-00',pix:'maria@email.com'},{name:'Pedro Costa',email:'pedro@email.com',phone:'(11) 99999-3333',cpf:'456.789.123-00',pix:'pedro@email.com'}];// Criar clientes\nconst createdClients=[];for(const client of sampleClients){const result=await clientService.create(client);if(result.success){createdClients.push(_objectSpread({id:result.id},client));}}// Criar assinaturas para os clientes\nconst subscriptions=[{clientId:createdClients[0].id,clientName:createdClients[0].name,amount:150.00,dayOfWeek:'monday',startDate:'2024-01-01',status:'active'},{clientId:createdClients[1].id,clientName:createdClients[1].name,amount:200.00,dayOfWeek:'wednesday',startDate:'2024-01-01',status:'active'}];for(const subscription of subscriptions){await subscriptionService.create(subscription);}// Criar algumas faturas de exemplo\nconst today=new Date();const invoices=[{clientId:createdClients[0].id,clientName:createdClients[0].name,amount:150.00,generationDate:new Date(today.getTime()-7*24*60*60*1000).toISOString().split('T')[0],dueDate:new Date(today.getTime()-5*24*60*60*1000).toISOString().split('T')[0],status:'paid'},{clientId:createdClients[1].id,clientName:createdClients[1].name,amount:200.00,generationDate:today.toISOString().split('T')[0],dueDate:new Date(today.getTime()+2*24*60*60*1000).toISOString().split('T')[0],status:'pending'},{clientId:createdClients[2].id,clientName:createdClients[2].name,amount:175.00,generationDate:new Date(today.getTime()-10*24*60*60*1000).toISOString().split('T')[0],dueDate:new Date(today.getTime()-3*24*60*60*1000).toISOString().split('T')[0],status:'overdue'}];for(const invoice of invoices){await invoiceService.create(invoice);}console.log('‚úÖ Dados de exemplo criados com sucesso!');return{success:true};}catch(error){console.error('‚ùå Erro ao criar dados de exemplo:',error);return{success:false,error:error.message};}}};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}