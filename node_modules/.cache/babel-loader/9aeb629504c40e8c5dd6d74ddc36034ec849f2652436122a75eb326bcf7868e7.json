{"ast":null,"code":"import _objectSpread from\"C:/Users/LEVI/Desktop/Gestao de cobrancas/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// src/components/clients/ClientsPage.js\nimport React,{useState}from'react';import ClientTable from'./ClientTable';import ClientModal from'./ClientModal';import SubscriptionModal from'./SubscriptionModal';import{clientService,subscriptionService}from'../../services/firestore';import{MESSAGES}from'../../utils/constants';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ClientsPage=_ref=>{let{clients,setClients,subscriptions,setSubscriptions}=_ref;const[isClientModalOpen,setIsClientModalOpen]=useState(false);const[isSubModalOpen,setIsSubModalOpen]=useState(false);const[selectedClient,setSelectedClient]=useState(null);const[selectedSubscription,setSelectedSubscription]=useState(null);const handleOpenClientModal=function(){let client=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;setSelectedClient(client);setIsClientModalOpen(true);};const handleCloseClientModal=()=>{setSelectedClient(null);setIsClientModalOpen(false);};const handleOpenSubModal=client=>{const existingSub=subscriptions.find(sub=>sub.clientId===client.id);setSelectedClient(client);setSelectedSubscription(existingSub||null);setIsSubModalOpen(true);};const handleCloseSubModal=()=>{setSelectedClient(null);setSelectedSubscription(null);setIsSubModalOpen(false);};const handleSaveClient=async clientData=>{if(selectedClient){// Update\nconst result=await clientService.update(selectedClient.id,clientData);if(result.success){setClients(prev=>prev.map(c=>c.id===selectedClient.id?_objectSpread(_objectSpread({},c),clientData):c));alert(MESSAGES.SUCCESS.CLIENT_UPDATED);}}else{// Create\nconst result=await clientService.create(clientData);if(result.success){setClients(prev=>[_objectSpread({id:result.id},clientData),...prev]);alert(MESSAGES.SUCCESS.CLIENT_CREATED);}}handleCloseClientModal();};const handleDeleteClient=async clientId=>{if(window.confirm(MESSAGES.ERROR.DELETE_CONFIRMATION)){const result=await clientService.delete(clientId);if(result.success){setClients(prev=>prev.filter(c=>c.id!==clientId));alert(MESSAGES.SUCCESS.CLIENT_DELETED);}}};const handleSaveSubscription=async subData=>{if(selectedSubscription){// Update\nconst result=await subscriptionService.update(selectedSubscription.id,subData);if(result.success){setSubscriptions(prev=>prev.map(s=>s.id===selectedSubscription.id?_objectSpread(_objectSpread({},s),subData):s));}}else{// Create\nconst result=await subscriptionService.create(subData);if(result.success){setSubscriptions(prev=>[_objectSpread({id:result.id},subData),...prev]);}}handleCloseSubModal();};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-between items-center mb-6\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"text-2xl font-bold text-gray-800\",children:\"Gerenciar Clientes\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleOpenClientModal(),className:\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700\",children:\"Adicionar Cliente\"})]}),/*#__PURE__*/_jsx(ClientTable,{clients:clients,onEdit:handleOpenClientModal,onDelete:handleDeleteClient,onManageSubscription:handleOpenSubModal}),/*#__PURE__*/_jsx(ClientModal,{isOpen:isClientModalOpen,onClose:handleCloseClientModal,onSave:handleSaveClient,client:selectedClient}),selectedClient&&/*#__PURE__*/_jsx(SubscriptionModal,{isOpen:isSubModalOpen,onClose:handleCloseSubModal,onSave:handleSaveSubscription,subscription:selectedSubscription,client:selectedClient})]});};export default ClientsPage;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}