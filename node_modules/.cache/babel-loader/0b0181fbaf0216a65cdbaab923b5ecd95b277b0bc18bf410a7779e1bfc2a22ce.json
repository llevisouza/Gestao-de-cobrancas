{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useFirestore.js\nimport { useState, useEffect } from 'react';\nimport { createClient as createClientService, updateClient as updateClientService, deleteClient as deleteClientService, createSubscription as createSubscriptionService, updateSubscription as updateSubscriptionService, deleteSubscription as deleteSubscriptionService, createInvoice as createInvoiceService, updateInvoice as updateInvoiceService, deleteInvoice as deleteInvoiceService, markInvoiceAsPaid, subscribeToClients, subscribeToSubscriptions, subscribeToInvoices, getInvoicesByPeriod, generateInvoicesForMonth, createSampleData } from '../services/firestore';\n\n/**\r\n * Hook personalizado para gerenciar operações do Firestore\r\n * Fornece estado reativo e funções para CRUD de todas as entidades\r\n */\nexport const useFirestore = () => {\n  _s();\n  // Estados\n  const [clients, setClients] = useState([]);\n  const [subscriptions, setSubscriptions] = useState([]);\n  const [invoices, setInvoices] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Função para verificar se data está vencida\n  const isOverdue = dueDate => {\n    const today = new Date();\n    const due = dueDate.toDate ? dueDate.toDate() : new Date(dueDate);\n    return due < today;\n  };\n\n  // Subscrições em tempo real\n  useEffect(() => {\n    console.log('🔄 Iniciando subscrições do Firestore...');\n\n    // Subscrição para clientes\n    const unsubscribeClients = subscribeToClients(data => {\n      console.log('✅ Clientes atualizados:', data.length);\n      setClients(data);\n    });\n\n    // Subscrição para assinaturas\n    const unsubscribeSubscriptions = subscribeToSubscriptions(data => {\n      console.log('✅ Assinaturas atualizadas:', data.length);\n      setSubscriptions(data);\n    });\n\n    // Subscrição para faturas\n    const unsubscribeInvoices = subscribeToInvoices(data => {\n      console.log('✅ Faturas atualizadas:', data.length);\n      // Atualizar status das faturas vencidas\n      const updatedInvoices = data.map(invoice => {\n        return {\n          ...invoice,\n          status: invoice.status === 'pending' && isOverdue(invoice.dueDate) ? 'overdue' : invoice.status\n        };\n      });\n      setInvoices(updatedInvoices);\n    });\n\n    // Cleanup das subscrições\n    return () => {\n      console.log('🔄 Limpando subscrições do Firestore...');\n      unsubscribeClients();\n      unsubscribeSubscriptions();\n      unsubscribeInvoices();\n    };\n  }, []);\n\n  // =================== FUNÇÕES DE CLIENTES ===================\n\n  const createClient = async clientData => {\n    setLoading(true);\n    setError(null);\n    try {\n      var _clientData$name, _clientData$email, _clientData$phone, _clientData$company, _clientData$address;\n      const newClient = {\n        name: (_clientData$name = clientData.name) === null || _clientData$name === void 0 ? void 0 : _clientData$name.trim(),\n        email: (_clientData$email = clientData.email) === null || _clientData$email === void 0 ? void 0 : _clientData$email.trim().toLowerCase(),\n        phone: (_clientData$phone = clientData.phone) === null || _clientData$phone === void 0 ? void 0 : _clientData$phone.trim(),\n        company: ((_clientData$company = clientData.company) === null || _clientData$company === void 0 ? void 0 : _clientData$company.trim()) || '',\n        address: ((_clientData$address = clientData.address) === null || _clientData$address === void 0 ? void 0 : _clientData$address.trim()) || ''\n      };\n      await createClientService(newClient);\n      console.log('✅ Cliente criado com sucesso');\n    } catch (error) {\n      console.error('❌ Erro ao criar cliente:', error);\n      setError(error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const updateClient = async (clientId, clientData) => {\n    setLoading(true);\n    setError(null);\n    try {\n      var _clientData$name2, _clientData$email2, _clientData$phone2, _clientData$company2, _clientData$address2;\n      const updatedClient = {\n        name: (_clientData$name2 = clientData.name) === null || _clientData$name2 === void 0 ? void 0 : _clientData$name2.trim(),\n        email: (_clientData$email2 = clientData.email) === null || _clientData$email2 === void 0 ? void 0 : _clientData$email2.trim().toLowerCase(),\n        phone: (_clientData$phone2 = clientData.phone) === null || _clientData$phone2 === void 0 ? void 0 : _clientData$phone2.trim(),\n        company: ((_clientData$company2 = clientData.company) === null || _clientData$company2 === void 0 ? void 0 : _clientData$company2.trim()) || '',\n        address: ((_clientData$address2 = clientData.address) === null || _clientData$address2 === void 0 ? void 0 : _clientData$address2.trim()) || ''\n      };\n      await updateClientService(clientId, updatedClient);\n      console.log('✅ Cliente atualizado com sucesso');\n    } catch (error) {\n      console.error('❌ Erro ao atualizar cliente:', error);\n      setError(error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const deleteClient = async clientId => {\n    setLoading(true);\n    setError(null);\n    try {\n      await deleteClientService(clientId);\n      console.log('✅ Cliente deletado com sucesso');\n    } catch (error) {\n      console.error('❌ Erro ao deletar cliente:', error);\n      setError(error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // =================== FUNÇÕES DE ASSINATURAS ===================\n\n  const createSubscription = async subscriptionData => {\n    setLoading(true);\n    setError(null);\n    try {\n      var _subscriptionData$ser, _subscriptionData$des;\n      const newSubscription = {\n        clientId: subscriptionData.clientId,\n        service: (_subscriptionData$ser = subscriptionData.service) === null || _subscriptionData$ser === void 0 ? void 0 : _subscriptionData$ser.trim(),\n        description: ((_subscriptionData$des = subscriptionData.description) === null || _subscriptionData$des === void 0 ? void 0 : _subscriptionData$des.trim()) || '',\n        amount: parseFloat(subscriptionData.amount),\n        billingCycle: subscriptionData.billingCycle,\n        startDate: new Date(subscriptionData.startDate),\n        status: subscriptionData.status || 'active',\n        billingDay: parseInt(subscriptionData.billingDay) || 5\n      };\n      await createSubscriptionService(newSubscription);\n      console.log('✅ Assinatura criada com sucesso');\n    } catch (error) {\n      console.error('❌ Erro ao criar assinatura:', error);\n      setError(error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const updateSubscription = async (subscriptionId, subscriptionData) => {\n    setLoading(true);\n    setError(null);\n    try {\n      var _subscriptionData$ser2, _subscriptionData$des2;\n      const updatedSubscription = {\n        service: (_subscriptionData$ser2 = subscriptionData.service) === null || _subscriptionData$ser2 === void 0 ? void 0 : _subscriptionData$ser2.trim(),\n        description: ((_subscriptionData$des2 = subscriptionData.description) === null || _subscriptionData$des2 === void 0 ? void 0 : _subscriptionData$des2.trim()) || '',\n        amount: parseFloat(subscriptionData.amount),\n        billingCycle: subscriptionData.billingCycle,\n        status: subscriptionData.status,\n        billingDay: parseInt(subscriptionData.billingDay) || 5\n      };\n      await updateSubscriptionService(subscriptionId, updatedSubscription);\n      console.log('✅ Assinatura atualizada com sucesso');\n    } catch (error) {\n      console.error('❌ Erro ao atualizar assinatura:', error);\n      setError(error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const deleteSubscription = async subscriptionId => {\n    setLoading(true);\n    setError(null);\n    try {\n      await deleteSubscriptionService(subscriptionId);\n      console.log('✅ Assinatura deletada com sucesso');\n    } catch (error) {\n      console.error('❌ Erro ao deletar assinatura:', error);\n      setError(error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // =================== FUNÇÕES DE FATURAS ===================\n\n  const createInvoice = async invoiceData => {\n    setLoading(true);\n    setError(null);\n    try {\n      var _invoiceData$descript;\n      const newInvoice = {\n        clientId: invoiceData.clientId,\n        subscriptionId: invoiceData.subscriptionId || null,\n        amount: parseFloat(invoiceData.amount),\n        description: (_invoiceData$descript = invoiceData.description) === null || _invoiceData$descript === void 0 ? void 0 : _invoiceData$descript.trim(),\n        dueDate: new Date(invoiceData.dueDate),\n        status: invoiceData.status || 'pending',\n        month: invoiceData.month || new Date().getMonth(),\n        year: invoiceData.year || new Date().getFullYear()\n      };\n      await createInvoiceService(newInvoice);\n      console.log('✅ Fatura criada com sucesso');\n    } catch (error) {\n      console.error('❌ Erro ao criar fatura:', error);\n      setError(error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const updateInvoice = async (invoiceId, invoiceData) => {\n    setLoading(true);\n    setError(null);\n    try {\n      var _invoiceData$descript2;\n      const updatedInvoice = {\n        amount: parseFloat(invoiceData.amount),\n        description: (_invoiceData$descript2 = invoiceData.description) === null || _invoiceData$descript2 === void 0 ? void 0 : _invoiceData$descript2.trim(),\n        dueDate: new Date(invoiceData.dueDate),\n        status: invoiceData.status\n      };\n      await updateInvoiceService(invoiceId, updatedInvoice);\n      console.log('✅ Fatura atualizada com sucesso');\n    } catch (error) {\n      console.error('❌ Erro ao atualizar fatura:', error);\n      setError(error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const deleteInvoice = async invoiceId => {\n    setLoading(true);\n    setError(null);\n    try {\n      await deleteInvoiceService(invoiceId);\n      console.log('✅ Fatura deletada com sucesso');\n    } catch (error) {\n      console.error('❌ Erro ao deletar fatura:', error);\n      setError(error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const markAsPaid = async invoiceId => {\n    setLoading(true);\n    setError(null);\n    try {\n      await markInvoiceAsPaid(invoiceId);\n      console.log('✅ Fatura marcada como paga');\n    } catch (error) {\n      console.error('❌ Erro ao marcar fatura como paga:', error);\n      setError(error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // =================== FUNÇÕES AUXILIARES ===================\n\n  const getInvoicesByDateRange = async (startDate, endDate) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const invoices = await getInvoicesByPeriod(startDate, endDate);\n      console.log('✅ Faturas por período carregadas:', invoices.length);\n      return invoices;\n    } catch (error) {\n      console.error('❌ Erro ao carregar faturas por período:', error);\n      setError(error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const generateMonthlyInvoices = async (month, year) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const count = await generateInvoicesForMonth(month, year);\n      console.log(`✅ ${count} faturas geradas para ${month + 1}/${year}`);\n      return count;\n    } catch (error) {\n      console.error('❌ Erro ao gerar faturas mensais:', error);\n      setError(error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const createExampleData = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const result = await createSampleData();\n      console.log('✅ Dados de exemplo criados:', result);\n      return result;\n    } catch (error) {\n      console.error('❌ Erro ao criar dados de exemplo:', error);\n      setError(error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // =================== GETTERS COMPUTADOS ===================\n\n  // Buscar cliente por ID\n  const getClientById = clientId => {\n    return clients.find(client => client.id === clientId);\n  };\n\n  // Buscar assinaturas por cliente\n  const getSubscriptionsByClientId = clientId => {\n    return subscriptions.filter(sub => sub.clientId === clientId);\n  };\n\n  // Buscar faturas por cliente\n  const getInvoicesByClientId = clientId => {\n    return invoices.filter(invoice => invoice.clientId === clientId);\n  };\n\n  // Estatísticas\n  const getStats = () => {\n    const totalClients = clients.length;\n    const activeSubscriptions = subscriptions.filter(sub => sub.status === 'active').length;\n    const pendingInvoices = invoices.filter(invoice => invoice.status === 'pending').length;\n    const overdueInvoices = invoices.filter(invoice => invoice.status === 'overdue').length;\n    const totalRevenue = invoices.filter(invoice => invoice.status === 'paid').reduce((sum, invoice) => sum + (invoice.amount || 0), 0);\n    const pendingRevenue = invoices.filter(invoice => invoice.status === 'pending').reduce((sum, invoice) => sum + (invoice.amount || 0), 0);\n    return {\n      totalClients,\n      activeSubscriptions,\n      pendingInvoices,\n      overdueInvoices,\n      totalRevenue,\n      pendingRevenue\n    };\n  };\n\n  // Retornar todas as funções e dados\n  return {\n    // Estados\n    clients,\n    subscriptions,\n    invoices,\n    loading,\n    error,\n    // Funções de clientes\n    createClient,\n    updateClient,\n    deleteClient,\n    // Funções de assinaturas\n    createSubscription,\n    updateSubscription,\n    deleteSubscription,\n    // Funções de faturas\n    createInvoice,\n    updateInvoice,\n    deleteInvoice,\n    markAsPaid,\n    // Funções auxiliares\n    getInvoicesByDateRange,\n    generateMonthlyInvoices,\n    createExampleData,\n    // Getters\n    getClientById,\n    getSubscriptionsByClientId,\n    getInvoicesByClientId,\n    getStats\n  };\n};\n_s(useFirestore, \"4DNarF0y4OC9iGEF1lZCTJpRQnA=\");","map":{"version":3,"names":["useState","useEffect","createClient","createClientService","updateClient","updateClientService","deleteClient","deleteClientService","createSubscription","createSubscriptionService","updateSubscription","updateSubscriptionService","deleteSubscription","deleteSubscriptionService","createInvoice","createInvoiceService","updateInvoice","updateInvoiceService","deleteInvoice","deleteInvoiceService","markInvoiceAsPaid","subscribeToClients","subscribeToSubscriptions","subscribeToInvoices","getInvoicesByPeriod","generateInvoicesForMonth","createSampleData","useFirestore","_s","clients","setClients","subscriptions","setSubscriptions","invoices","setInvoices","loading","setLoading","error","setError","isOverdue","dueDate","today","Date","due","toDate","console","log","unsubscribeClients","data","length","unsubscribeSubscriptions","unsubscribeInvoices","updatedInvoices","map","invoice","status","clientData","_clientData$name","_clientData$email","_clientData$phone","_clientData$company","_clientData$address","newClient","name","trim","email","toLowerCase","phone","company","address","clientId","_clientData$name2","_clientData$email2","_clientData$phone2","_clientData$company2","_clientData$address2","updatedClient","subscriptionData","_subscriptionData$ser","_subscriptionData$des","newSubscription","service","description","amount","parseFloat","billingCycle","startDate","billingDay","parseInt","subscriptionId","_subscriptionData$ser2","_subscriptionData$des2","updatedSubscription","invoiceData","_invoiceData$descript","newInvoice","month","getMonth","year","getFullYear","invoiceId","_invoiceData$descript2","updatedInvoice","markAsPaid","getInvoicesByDateRange","endDate","generateMonthlyInvoices","count","createExampleData","result","getClientById","find","client","id","getSubscriptionsByClientId","filter","sub","getInvoicesByClientId","getStats","totalClients","activeSubscriptions","pendingInvoices","overdueInvoices","totalRevenue","reduce","sum","pendingRevenue"],"sources":["C:/Users/LEVI/Desktop/Gestao-de-cobrancas/src/hooks/useFirestore.js"],"sourcesContent":["// src/hooks/useFirestore.js\r\nimport { useState, useEffect } from 'react';\r\nimport { \r\n  createClient as createClientService,\r\n  updateClient as updateClientService,\r\n  deleteClient as deleteClientService,\r\n  createSubscription as createSubscriptionService,\r\n  updateSubscription as updateSubscriptionService,\r\n  deleteSubscription as deleteSubscriptionService,\r\n  createInvoice as createInvoiceService,\r\n  updateInvoice as updateInvoiceService,\r\n  deleteInvoice as deleteInvoiceService,\r\n  markInvoiceAsPaid,\r\n  subscribeToClients,\r\n  subscribeToSubscriptions,\r\n  subscribeToInvoices,\r\n  getInvoicesByPeriod,\r\n  generateInvoicesForMonth,\r\n  createSampleData\r\n} from '../services/firestore';\r\n\r\n/**\r\n * Hook personalizado para gerenciar operações do Firestore\r\n * Fornece estado reativo e funções para CRUD de todas as entidades\r\n */\r\nexport const useFirestore = () => {\r\n  // Estados\r\n  const [clients, setClients] = useState([]);\r\n  const [subscriptions, setSubscriptions] = useState([]);\r\n  const [invoices, setInvoices] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Função para verificar se data está vencida\r\n  const isOverdue = (dueDate) => {\r\n    const today = new Date();\r\n    const due = dueDate.toDate ? dueDate.toDate() : new Date(dueDate);\r\n    return due < today;\r\n  };\r\n\r\n  // Subscrições em tempo real\r\n  useEffect(() => {\r\n    console.log('🔄 Iniciando subscrições do Firestore...');\r\n    \r\n    // Subscrição para clientes\r\n    const unsubscribeClients = subscribeToClients((data) => {\r\n      console.log('✅ Clientes atualizados:', data.length);\r\n      setClients(data);\r\n    });\r\n\r\n    // Subscrição para assinaturas\r\n    const unsubscribeSubscriptions = subscribeToSubscriptions((data) => {\r\n      console.log('✅ Assinaturas atualizadas:', data.length);\r\n      setSubscriptions(data);\r\n    });\r\n\r\n    // Subscrição para faturas\r\n    const unsubscribeInvoices = subscribeToInvoices((data) => {\r\n      console.log('✅ Faturas atualizadas:', data.length);\r\n      // Atualizar status das faturas vencidas\r\n      const updatedInvoices = data.map(invoice => {\r\n        return {\r\n          ...invoice,\r\n          status: invoice.status === 'pending' && isOverdue(invoice.dueDate) \r\n            ? 'overdue' \r\n            : invoice.status\r\n        };\r\n      });\r\n      setInvoices(updatedInvoices);\r\n    });\r\n\r\n    // Cleanup das subscrições\r\n    return () => {\r\n      console.log('🔄 Limpando subscrições do Firestore...');\r\n      unsubscribeClients();\r\n      unsubscribeSubscriptions();\r\n      unsubscribeInvoices();\r\n    };\r\n  }, []);\r\n\r\n  // =================== FUNÇÕES DE CLIENTES ===================\r\n\r\n  const createClient = async (clientData) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const newClient = {\r\n        name: clientData.name?.trim(),\r\n        email: clientData.email?.trim().toLowerCase(),\r\n        phone: clientData.phone?.trim(),\r\n        company: clientData.company?.trim() || '',\r\n        address: clientData.address?.trim() || ''\r\n      };\r\n      await createClientService(newClient);\r\n      console.log('✅ Cliente criado com sucesso');\r\n    } catch (error) {\r\n      console.error('❌ Erro ao criar cliente:', error);\r\n      setError(error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const updateClient = async (clientId, clientData) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const updatedClient = {\r\n        name: clientData.name?.trim(),\r\n        email: clientData.email?.trim().toLowerCase(),\r\n        phone: clientData.phone?.trim(),\r\n        company: clientData.company?.trim() || '',\r\n        address: clientData.address?.trim() || ''\r\n      };\r\n      await updateClientService(clientId, updatedClient);\r\n      console.log('✅ Cliente atualizado com sucesso');\r\n    } catch (error) {\r\n      console.error('❌ Erro ao atualizar cliente:', error);\r\n      setError(error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const deleteClient = async (clientId) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      await deleteClientService(clientId);\r\n      console.log('✅ Cliente deletado com sucesso');\r\n    } catch (error) {\r\n      console.error('❌ Erro ao deletar cliente:', error);\r\n      setError(error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // =================== FUNÇÕES DE ASSINATURAS ===================\r\n\r\n  const createSubscription = async (subscriptionData) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const newSubscription = {\r\n        clientId: subscriptionData.clientId,\r\n        service: subscriptionData.service?.trim(),\r\n        description: subscriptionData.description?.trim() || '',\r\n        amount: parseFloat(subscriptionData.amount),\r\n        billingCycle: subscriptionData.billingCycle,\r\n        startDate: new Date(subscriptionData.startDate),\r\n        status: subscriptionData.status || 'active',\r\n        billingDay: parseInt(subscriptionData.billingDay) || 5\r\n      };\r\n      await createSubscriptionService(newSubscription);\r\n      console.log('✅ Assinatura criada com sucesso');\r\n    } catch (error) {\r\n      console.error('❌ Erro ao criar assinatura:', error);\r\n      setError(error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const updateSubscription = async (subscriptionId, subscriptionData) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const updatedSubscription = {\r\n        service: subscriptionData.service?.trim(),\r\n        description: subscriptionData.description?.trim() || '',\r\n        amount: parseFloat(subscriptionData.amount),\r\n        billingCycle: subscriptionData.billingCycle,\r\n        status: subscriptionData.status,\r\n        billingDay: parseInt(subscriptionData.billingDay) || 5\r\n      };\r\n      await updateSubscriptionService(subscriptionId, updatedSubscription);\r\n      console.log('✅ Assinatura atualizada com sucesso');\r\n    } catch (error) {\r\n      console.error('❌ Erro ao atualizar assinatura:', error);\r\n      setError(error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const deleteSubscription = async (subscriptionId) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      await deleteSubscriptionService(subscriptionId);\r\n      console.log('✅ Assinatura deletada com sucesso');\r\n    } catch (error) {\r\n      console.error('❌ Erro ao deletar assinatura:', error);\r\n      setError(error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // =================== FUNÇÕES DE FATURAS ===================\r\n\r\n  const createInvoice = async (invoiceData) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const newInvoice = {\r\n        clientId: invoiceData.clientId,\r\n        subscriptionId: invoiceData.subscriptionId || null,\r\n        amount: parseFloat(invoiceData.amount),\r\n        description: invoiceData.description?.trim(),\r\n        dueDate: new Date(invoiceData.dueDate),\r\n        status: invoiceData.status || 'pending',\r\n        month: invoiceData.month || new Date().getMonth(),\r\n        year: invoiceData.year || new Date().getFullYear()\r\n      };\r\n      await createInvoiceService(newInvoice);\r\n      console.log('✅ Fatura criada com sucesso');\r\n    } catch (error) {\r\n      console.error('❌ Erro ao criar fatura:', error);\r\n      setError(error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const updateInvoice = async (invoiceId, invoiceData) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const updatedInvoice = {\r\n        amount: parseFloat(invoiceData.amount),\r\n        description: invoiceData.description?.trim(),\r\n        dueDate: new Date(invoiceData.dueDate),\r\n        status: invoiceData.status\r\n      };\r\n      await updateInvoiceService(invoiceId, updatedInvoice);\r\n      console.log('✅ Fatura atualizada com sucesso');\r\n    } catch (error) {\r\n      console.error('❌ Erro ao atualizar fatura:', error);\r\n      setError(error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const deleteInvoice = async (invoiceId) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      await deleteInvoiceService(invoiceId);\r\n      console.log('✅ Fatura deletada com sucesso');\r\n    } catch (error) {\r\n      console.error('❌ Erro ao deletar fatura:', error);\r\n      setError(error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const markAsPaid = async (invoiceId) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      await markInvoiceAsPaid(invoiceId);\r\n      console.log('✅ Fatura marcada como paga');\r\n    } catch (error) {\r\n      console.error('❌ Erro ao marcar fatura como paga:', error);\r\n      setError(error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // =================== FUNÇÕES AUXILIARES ===================\r\n\r\n  const getInvoicesByDateRange = async (startDate, endDate) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const invoices = await getInvoicesByPeriod(startDate, endDate);\r\n      console.log('✅ Faturas por período carregadas:', invoices.length);\r\n      return invoices;\r\n    } catch (error) {\r\n      console.error('❌ Erro ao carregar faturas por período:', error);\r\n      setError(error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const generateMonthlyInvoices = async (month, year) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const count = await generateInvoicesForMonth(month, year);\r\n      console.log(`✅ ${count} faturas geradas para ${month + 1}/${year}`);\r\n      return count;\r\n    } catch (error) {\r\n      console.error('❌ Erro ao gerar faturas mensais:', error);\r\n      setError(error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const createExampleData = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const result = await createSampleData();\r\n      console.log('✅ Dados de exemplo criados:', result);\r\n      return result;\r\n    } catch (error) {\r\n      console.error('❌ Erro ao criar dados de exemplo:', error);\r\n      setError(error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // =================== GETTERS COMPUTADOS ===================\r\n\r\n  // Buscar cliente por ID\r\n  const getClientById = (clientId) => {\r\n    return clients.find(client => client.id === clientId);\r\n  };\r\n\r\n  // Buscar assinaturas por cliente\r\n  const getSubscriptionsByClientId = (clientId) => {\r\n    return subscriptions.filter(sub => sub.clientId === clientId);\r\n  };\r\n\r\n  // Buscar faturas por cliente\r\n  const getInvoicesByClientId = (clientId) => {\r\n    return invoices.filter(invoice => invoice.clientId === clientId);\r\n  };\r\n\r\n  // Estatísticas\r\n  const getStats = () => {\r\n    const totalClients = clients.length;\r\n    const activeSubscriptions = subscriptions.filter(sub => sub.status === 'active').length;\r\n    const pendingInvoices = invoices.filter(invoice => invoice.status === 'pending').length;\r\n    const overdueInvoices = invoices.filter(invoice => invoice.status === 'overdue').length;\r\n    const totalRevenue = invoices\r\n      .filter(invoice => invoice.status === 'paid')\r\n      .reduce((sum, invoice) => sum + (invoice.amount || 0), 0);\r\n    const pendingRevenue = invoices\r\n      .filter(invoice => invoice.status === 'pending')\r\n      .reduce((sum, invoice) => sum + (invoice.amount || 0), 0);\r\n\r\n    return {\r\n      totalClients,\r\n      activeSubscriptions,\r\n      pendingInvoices,\r\n      overdueInvoices,\r\n      totalRevenue,\r\n      pendingRevenue\r\n    };\r\n  };\r\n\r\n  // Retornar todas as funções e dados\r\n  return {\r\n    // Estados\r\n    clients,\r\n    subscriptions,\r\n    invoices,\r\n    loading,\r\n    error,\r\n\r\n    // Funções de clientes\r\n    createClient,\r\n    updateClient,\r\n    deleteClient,\r\n\r\n    // Funções de assinaturas\r\n    createSubscription,\r\n    updateSubscription,\r\n    deleteSubscription,\r\n\r\n    // Funções de faturas\r\n    createInvoice,\r\n    updateInvoice,\r\n    deleteInvoice,\r\n    markAsPaid,\r\n\r\n    // Funções auxiliares\r\n    getInvoicesByDateRange,\r\n    generateMonthlyInvoices,\r\n    createExampleData,\r\n\r\n    // Getters\r\n    getClientById,\r\n    getSubscriptionsByClientId,\r\n    getInvoicesByClientId,\r\n    getStats\r\n  };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}