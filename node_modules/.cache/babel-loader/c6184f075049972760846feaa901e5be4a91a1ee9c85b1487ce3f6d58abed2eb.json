{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { createClient as createClientService, updateClient as updateClientService, deleteClient as deleteClientService, createSubscription as createSubscriptionService, updateSubscription as updateSubscriptionService, deleteSubscription as deleteSubscriptionService, createInvoice as createInvoiceService, updateInvoice as updateInvoiceService, deleteInvoice as deleteInvoiceService, subscribeToClients, subscribeToSubscriptions, subscribeToInvoices, generateInvoicesForActiveSubscriptions, createExampleDataService } from '../services/firestore';\nimport { isOverdue } from '../utils/dateUtils';\nexport const useFirestore = () => {\n  _s();\n  const [clients, setClients] = useState([]);\n  const [subscriptions, setSubscriptions] = useState([]);\n  const [invoices, setInvoices] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    setLoading(true);\n    const handleSubscriptionError = (entity, err) => {\n      console.error(`Erro ao buscar ${entity}:`, err);\n      setError(err);\n    };\n\n    // Subscrever aos dados em tempo real\n    const unsubscribeClients = subscribeToClients(setClients, err => handleSubscriptionError('clientes', err));\n    const unsubscribeSubscriptions = subscribeToSubscriptions(setSubscriptions, err => handleSubscriptionError('assinaturas', err));\n    const unsubscribeInvoices = subscribeToInvoices(data => {\n      // Atualizar status das faturas vencidas\n      const updatedInvoices = data.map(invoice => ({\n        ...invoice,\n        status: invoice.status === 'pending' && isOverdue(invoice.dueDate) ? 'overdue' : invoice.status\n      }));\n      setInvoices(updatedInvoices);\n    }, err => handleSubscriptionError('faturas', err));\n\n    // Para de exibir o loading após as subscrições serem estabelecidas.\n    // Os dados chegarão em tempo real.\n    setLoading(false);\n\n    // Cleanup das subscrições quando o componente desmontar\n    return () => {\n      unsubscribeClients();\n      unsubscribeSubscriptions();\n      unsubscribeInvoices();\n    };\n  }, []);\n\n  // Wrapper para simplificar o tratamento de try/catch/finally em todas as operações\n  const handleRequest = async (request, successMessage) => {\n    setLoading(true);\n    setError(null);\n    try {\n      await request();\n      if (successMessage) {\n        console.log(successMessage);\n      }\n    } catch (err) {\n      console.error('Ocorreu um erro na operação:', err);\n      setError(err);\n      throw err; // Re-lança o erro para que o componente que chamou a função possa tratá-lo se necessário\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // --- CRUD de Clientes ---\n  const createClient = clientData => handleRequest(async () => {\n    const newClient = {\n      ...clientData,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    await createClientService(newClient);\n  }, 'Cliente criado com sucesso');\n  const updateClient = (clientId, clientData) => handleRequest(async () => {\n    const updatedClient = {\n      ...clientData,\n      updatedAt: new Date().toISOString()\n    };\n    await updateClientService(clientId, updatedClient);\n  }, 'Cliente atualizado com sucesso');\n  const deleteClient = clientId => handleRequest(async () => {\n    const clientSubscriptions = subscriptions.filter(sub => sub.clientId === clientId && sub.status === 'active');\n    if (clientSubscriptions.length > 0) {\n      throw new Error('Não é possível excluir cliente com assinaturas ativas');\n    }\n    await deleteClientService(clientId);\n  }, 'Cliente excluído com sucesso');\n\n  // --- CRUD de Assinaturas ---\n  const createSubscription = subscriptionData => handleRequest(async () => {\n    const newSubscription = {\n      ...subscriptionData,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    await createSubscriptionService(newSubscription);\n  }, 'Assinatura criada com sucesso');\n  const updateSubscription = (subscriptionId, subscriptionData) => handleRequest(async () => {\n    const updatedSubscription = {\n      ...subscriptionData,\n      updatedAt: new Date().toISOString()\n    };\n    await updateSubscriptionService(subscriptionId, updatedSubscription);\n  }, 'Assinatura atualizada com sucesso');\n  const deleteSubscription = subscriptionId => handleRequest(async () => {\n    await deleteSubscriptionService(subscriptionId);\n  }, 'Assinatura excluída com sucesso');\n\n  // --- CRUD de Faturas ---\n  const createInvoice = invoiceData => handleRequest(async () => {\n    const newInvoice = {\n      ...invoiceData,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    await createInvoiceService(newInvoice);\n  }, 'Fatura criada com sucesso');\n  const updateInvoice = (invoiceId, invoiceData) => handleRequest(async () => {\n    const updatedInvoice = {\n      ...invoiceData,\n      updatedAt: new Date().toISOString()\n    };\n    await updateInvoiceService(invoiceId, updatedInvoice);\n  }, 'Fatura atualizada com sucesso');\n  const deleteInvoice = invoiceId => handleRequest(async () => {\n    await deleteInvoiceService(invoiceId);\n  }, 'Fatura excluída com sucesso');\n\n  // --- Funções Especializadas ---\n  const generateInvoicesForMonth = (month, year) => handleRequest(async () => {\n    console.log(`Gerando faturas para ${month}/${year}`);\n    const activeSubscriptions = subscriptions.filter(sub => sub.status === 'active');\n    if (activeSubscriptions.length === 0) {\n      throw new Error('Nenhuma assinatura ativa encontrada para gerar faturas.');\n    }\n    await generateInvoicesForActiveSubscriptions(month, year);\n  }, 'Faturas geradas com sucesso');\n  const createExampleData = () => handleRequest(async () => {\n    await createExampleDataService();\n  }, 'Dados de exemplo criados com sucesso');\n  const markInvoiceAsPaid = invoiceId => {\n    return updateInvoice(invoiceId, {\n      status: 'paid',\n      paidDate: new Date().toISOString()\n    });\n  };\n  const markInvoiceAsPending = invoiceId => {\n    return updateInvoice(invoiceId, {\n      status: 'pending',\n      paidDate: null\n    });\n  };\n  return {\n    // Estados\n    clients,\n    subscriptions,\n    invoices,\n    loading,\n    error,\n    // CRUD Clientes\n    createClient,\n    updateClient,\n    deleteClient,\n    // CRUD Assinaturas\n    createSubscription,\n    updateSubscription,\n    deleteSubscription,\n    // CRUD Faturas\n    createInvoice,\n    updateInvoice,\n    deleteInvoice,\n    markInvoiceAsPaid,\n    markInvoiceAsPending,\n    // Funções Especializadas\n    generateInvoicesForMonth,\n    createExampleData\n  };\n};\n_s(useFirestore, \"dgCNXlFmEFGtvGWfcy7EoLdmCKE=\");","map":{"version":3,"names":["useState","useEffect","createClient","createClientService","updateClient","updateClientService","deleteClient","deleteClientService","createSubscription","createSubscriptionService","updateSubscription","updateSubscriptionService","deleteSubscription","deleteSubscriptionService","createInvoice","createInvoiceService","updateInvoice","updateInvoiceService","deleteInvoice","deleteInvoiceService","subscribeToClients","subscribeToSubscriptions","subscribeToInvoices","generateInvoicesForActiveSubscriptions","createExampleDataService","isOverdue","useFirestore","_s","clients","setClients","subscriptions","setSubscriptions","invoices","setInvoices","loading","setLoading","error","setError","handleSubscriptionError","entity","err","console","unsubscribeClients","unsubscribeSubscriptions","unsubscribeInvoices","data","updatedInvoices","map","invoice","status","dueDate","handleRequest","request","successMessage","log","clientData","newClient","createdAt","Date","toISOString","updatedAt","clientId","updatedClient","clientSubscriptions","filter","sub","length","Error","subscriptionData","newSubscription","subscriptionId","updatedSubscription","invoiceData","newInvoice","invoiceId","updatedInvoice","generateInvoicesForMonth","month","year","activeSubscriptions","createExampleData","markInvoiceAsPaid","paidDate","markInvoiceAsPending"],"sources":["C:/Users/LEVI/Desktop/Gestao-de-cobrancas/src/hooks/useFirestore.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport {\r\n  createClient as createClientService,\r\n  updateClient as updateClientService,\r\n  deleteClient as deleteClientService,\r\n  createSubscription as createSubscriptionService,\r\n  updateSubscription as updateSubscriptionService,\r\n  deleteSubscription as deleteSubscriptionService,\r\n  createInvoice as createInvoiceService,\r\n  updateInvoice as updateInvoiceService,\r\n  deleteInvoice as deleteInvoiceService,\r\n  subscribeToClients,\r\n  subscribeToSubscriptions,\r\n  subscribeToInvoices,\r\n  generateInvoicesForActiveSubscriptions,\r\n  createExampleDataService\r\n} from '../services/firestore';\r\nimport { isOverdue } from '../utils/dateUtils';\r\n\r\nexport const useFirestore = () => {\r\n  const [clients, setClients] = useState([]);\r\n  const [subscriptions, setSubscriptions] = useState([]);\r\n  const [invoices, setInvoices] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n\r\n    const handleSubscriptionError = (entity, err) => {\r\n      console.error(`Erro ao buscar ${entity}:`, err);\r\n      setError(err);\r\n    };\r\n\r\n    // Subscrever aos dados em tempo real\r\n    const unsubscribeClients = subscribeToClients(setClients, (err) => handleSubscriptionError('clientes', err));\r\n\r\n    const unsubscribeSubscriptions = subscribeToSubscriptions(setSubscriptions, (err) => handleSubscriptionError('assinaturas', err));\r\n\r\n    const unsubscribeInvoices = subscribeToInvoices((data) => {\r\n      // Atualizar status das faturas vencidas\r\n      const updatedInvoices = data.map(invoice => ({\r\n        ...invoice,\r\n        status: invoice.status === 'pending' && isOverdue(invoice.dueDate)\r\n          ? 'overdue'\r\n          : invoice.status\r\n      }));\r\n      setInvoices(updatedInvoices);\r\n    }, (err) => handleSubscriptionError('faturas', err));\r\n    \r\n    // Para de exibir o loading após as subscrições serem estabelecidas.\r\n    // Os dados chegarão em tempo real.\r\n    setLoading(false);\r\n\r\n    // Cleanup das subscrições quando o componente desmontar\r\n    return () => {\r\n      unsubscribeClients();\r\n      unsubscribeSubscriptions();\r\n      unsubscribeInvoices();\r\n    };\r\n  }, []);\r\n\r\n  // Wrapper para simplificar o tratamento de try/catch/finally em todas as operações\r\n  const handleRequest = async (request, successMessage) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      await request();\r\n      if (successMessage) {\r\n        console.log(successMessage);\r\n      }\r\n    } catch (err) {\r\n      console.error('Ocorreu um erro na operação:', err);\r\n      setError(err);\r\n      throw err; // Re-lança o erro para que o componente que chamou a função possa tratá-lo se necessário\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // --- CRUD de Clientes ---\r\n  const createClient = (clientData) => handleRequest(async () => {\r\n    const newClient = {\r\n      ...clientData,\r\n      createdAt: new Date().toISOString(),\r\n      updatedAt: new Date().toISOString()\r\n    };\r\n    await createClientService(newClient);\r\n  }, 'Cliente criado com sucesso');\r\n\r\n  const updateClient = (clientId, clientData) => handleRequest(async () => {\r\n    const updatedClient = {\r\n      ...clientData,\r\n      updatedAt: new Date().toISOString()\r\n    };\r\n    await updateClientService(clientId, updatedClient);\r\n  }, 'Cliente atualizado com sucesso');\r\n\r\n  const deleteClient = (clientId) => handleRequest(async () => {\r\n    const clientSubscriptions = subscriptions.filter(\r\n      sub => sub.clientId === clientId && sub.status === 'active'\r\n    );\r\n    if (clientSubscriptions.length > 0) {\r\n      throw new Error('Não é possível excluir cliente com assinaturas ativas');\r\n    }\r\n    await deleteClientService(clientId);\r\n  }, 'Cliente excluído com sucesso');\r\n\r\n  // --- CRUD de Assinaturas ---\r\n  const createSubscription = (subscriptionData) => handleRequest(async () => {\r\n    const newSubscription = {\r\n      ...subscriptionData,\r\n      createdAt: new Date().toISOString(),\r\n      updatedAt: new Date().toISOString()\r\n    };\r\n    await createSubscriptionService(newSubscription);\r\n  }, 'Assinatura criada com sucesso');\r\n\r\n  const updateSubscription = (subscriptionId, subscriptionData) => handleRequest(async () => {\r\n    const updatedSubscription = {\r\n      ...subscriptionData,\r\n      updatedAt: new Date().toISOString()\r\n    };\r\n    await updateSubscriptionService(subscriptionId, updatedSubscription);\r\n  }, 'Assinatura atualizada com sucesso');\r\n\r\n  const deleteSubscription = (subscriptionId) => handleRequest(async () => {\r\n    await deleteSubscriptionService(subscriptionId);\r\n  }, 'Assinatura excluída com sucesso');\r\n\r\n  // --- CRUD de Faturas ---\r\n  const createInvoice = (invoiceData) => handleRequest(async () => {\r\n    const newInvoice = {\r\n      ...invoiceData,\r\n      createdAt: new Date().toISOString(),\r\n      updatedAt: new Date().toISOString()\r\n    };\r\n    await createInvoiceService(newInvoice);\r\n  }, 'Fatura criada com sucesso');\r\n\r\n  const updateInvoice = (invoiceId, invoiceData) => handleRequest(async () => {\r\n    const updatedInvoice = {\r\n      ...invoiceData,\r\n      updatedAt: new Date().toISOString()\r\n    };\r\n    await updateInvoiceService(invoiceId, updatedInvoice);\r\n  }, 'Fatura atualizada com sucesso');\r\n\r\n  const deleteInvoice = (invoiceId) => handleRequest(async () => {\r\n    await deleteInvoiceService(invoiceId);\r\n  }, 'Fatura excluída com sucesso');\r\n\r\n  // --- Funções Especializadas ---\r\n  const generateInvoicesForMonth = (month, year) => handleRequest(async () => {\r\n    console.log(`Gerando faturas para ${month}/${year}`);\r\n    const activeSubscriptions = subscriptions.filter(sub => sub.status === 'active');\r\n    if (activeSubscriptions.length === 0) {\r\n      throw new Error('Nenhuma assinatura ativa encontrada para gerar faturas.');\r\n    }\r\n    await generateInvoicesForActiveSubscriptions(month, year);\r\n  }, 'Faturas geradas com sucesso');\r\n  \r\n  const createExampleData = () => handleRequest(async () => {\r\n    await createExampleDataService();\r\n  }, 'Dados de exemplo criados com sucesso');\r\n\r\n  const markInvoiceAsPaid = (invoiceId) => {\r\n    return updateInvoice(invoiceId, {\r\n      status: 'paid',\r\n      paidDate: new Date().toISOString()\r\n    });\r\n  };\r\n\r\n  const markInvoiceAsPending = (invoiceId) => {\r\n    return updateInvoice(invoiceId, {\r\n      status: 'pending',\r\n      paidDate: null\r\n    });\r\n  };\r\n\r\n  return {\r\n    // Estados\r\n    clients,\r\n    subscriptions,\r\n    invoices,\r\n    loading,\r\n    error,\r\n    // CRUD Clientes\r\n    createClient,\r\n    updateClient,\r\n    deleteClient,\r\n    // CRUD Assinaturas\r\n    createSubscription,\r\n    updateSubscription,\r\n    deleteSubscription,\r\n    // CRUD Faturas\r\n    createInvoice,\r\n    updateInvoice,\r\n    deleteInvoice,\r\n    markInvoiceAsPaid,\r\n    markInvoiceAsPending,\r\n    // Funções Especializadas\r\n    generateInvoicesForMonth,\r\n    createExampleData\r\n  };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}