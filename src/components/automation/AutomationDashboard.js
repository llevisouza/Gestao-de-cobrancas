// src/components/automation/AutomationDashboard.js
import React from 'react';
import { useAutomation } from '../../hooks/useAutomation';
import LoadingSpinner from '../common/LoadingSpinner'; // Ajuste o path se necess√°rio

function AutomationDashboard() {
  const {
    isRunning,
    loading,
    error,
    startAutomation,
    stopAutomation,
    runManualCycle,
    config,
    updateConfig,
    getAutomationStats,
    getLogs,
    testConnections,
    getStatus,
  } = useAutomation();

  const handleStartAutomation = async () => {
    console.log('üöÄ [AutomationDashboard] Usu√°rio clicou em Iniciar');
    const result = await startAutomation();
    if (result.success) {
      console.log('‚úÖ [AutomationDashboard] Automa√ß√£o iniciada com sucesso');
    }
  };

  const handleStopAutomation = async () => {
    console.log('üõë [AutomationDashboard] Usu√°rio clicou em Parar');
    const result = await stopAutomation();
    if (result.success) {
      console.log('‚úÖ [AutomationDashboard] Automa√ß√£o parada com sucesso');
    }
  };

  const handleRunManual = async () => {
    console.log('üîÑ [AutomationDashboard] Usu√°rio clicou em Ciclo Manual');
    const result = await runManualCycle();
    if (result.success) {
      console.log('‚úÖ [AutomationDashboard] Ciclo manual executado com sucesso');
    }
  };

  const handleUpdateConfig = async (newConfig) => {
    console.log('‚öôÔ∏è [AutomationDashboard] Usu√°rio atualizando config:', newConfig);
    const result = await updateConfig(newConfig);
    if (result.success) {
      console.log('‚úÖ [AutomationDashboard] Configura√ß√£o atualizada com sucesso');
    }
  };

  const handleTestConnections = async () => {
    console.log('üîç [AutomationDashboard] Usu√°rio clicou em Testar Conex√µes');
    const result = await testConnections();
    console.log('‚úÖ [AutomationDashboard] Resultado do teste:', result);
  };

  if (loading || isRunning === null) {
    return (
      <div className="p-4">
        <LoadingSpinner />
        <p className="text-center">Carregando status da automa√ß√£o...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="p-4 text-red-500">
        <p>Erro: {error}</p>
        <button
          onClick={() => getStatus()}
          className="mt-2 bg-blue-500 text-white px-4 py-2 rounded"
        >
          Tentar novamente
        </button>
      </div>
    );
  }

  return (
    <div className="p-4">
      <h2 className="text-2xl font-bold mb-4">Dashboard de Automa√ß√£o</h2>
      <div className="mb-4">
        Status: {isRunning ? 'üü¢ Ativo' : 'üî¥ Parado'}
      </div>
      
      <button 
        onClick={isRunning ? handleStopAutomation : handleStartAutomation}
        className="bg-blue-500 text-white px-4 py-2 rounded mr-2"
      >
        {isRunning ? 'Parar' : 'Iniciar'} Automa√ß√£o
      </button>
      
      <button 
        onClick={handleRunManual}
        className="bg-green-500 text-white px-4 py-2 rounded mr-2"
      >
        Executar Ciclo Manual
      </button>

      <button 
        onClick={() => getAutomationStats()}
        className="bg-purple-500 text-white px-4 py-2 rounded mr-2"
      >
        Ver Estat√≠sticas
      </button>

      <button 
        onClick={() => getLogs()}
        className="bg-yellow-500 text-white px-4 py-2 rounded mr-2"
      >
        Ver Logs
      </button>

      <button 
        onClick={handleTestConnections}
        className="bg-orange-500 text-white px-4 py-2 rounded"
      >
        Testar Conex√µes
      </button>

      <div className="mt-4">
        <h3>Configura√ß√µes Atuais:</h3>
        <pre>{JSON.stringify(config, null, 2)}</pre>
        {/* Adicione um formul√°rio para atualizar config se necess√°rio */}
      </div>
    </div>
  );
}

export default AutomationDashboard;