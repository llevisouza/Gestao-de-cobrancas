// src/services/whatsappAutomationService.js - CORRE√á√ïES APLICADAS
import { whatsappService } from './whatsappService';
import { 
  collection, 
  query, 
  where, 
  getDocs, 
  addDoc, 
  updateDoc, 
  doc,
  limit,        // CORRE√á√ÉO: Importa√ß√£o correta da fun√ß√£o limit
  orderBy       // CORRE√á√ÉO: Importa√ß√£o correta da fun√ß√£o orderBy
} from 'firebase/firestore';
import { db } from './firebase';
import { formatDate, getCurrentDate, getDaysDifference } from '../utils/dateUtils';

class WhatsAppAutomationService {
  constructor() {
    this.isRunning = false;
    this.intervalId = null;
    this.config = {
      enabled: false,
      checkInterval: 60000, // 1 minuto
      businessHours: {
        start: 8, // 8h
        end: 18, // 18h
        workDays: [1, 2, 3, 4, 5] // Segunda a Sexta
      },
      reminderDays: 3, // Lembrete 3 dias antes
      overdueScalation: [1, 3, 7, 15, 30], // Escalonamento em dias
      maxMessagesPerDay: 1, // M√°ximo 1 mensagem por cliente por dia
      delayBetweenMessages: 5000 // 5 segundos entre mensagens
    };
    this.stats = {
      messagesSent: 0, // CORRE√á√ÉO: Corrigido o nome da propriedade
      errors: 0,
      lastRun: null,
      startTime: null
    };
  }

  // =============================================
  // CONTROLES PRINCIPAIS
  // =============================================

  // Iniciar automa√ß√£o
  async startAutomation() {
    if (this.isRunning) {
      console.warn('‚ö†Ô∏è Automa√ß√£o j√° est√° rodando');
      return { success: false, error: 'Automa√ß√£o j√° est√° ativa' };
    }

    try {
      console.log('ü§ñ Iniciando automa√ß√£o WhatsApp...');
      
      // Verificar se WhatsApp est√° conectado
      const connectionStatus = await whatsappService.checkConnection();
      if (!connectionStatus.connected) {
        throw new Error('WhatsApp n√£o est√° conectado');
      }

      this.isRunning = true;
      this.stats.startTime = new Date();
      this.config.enabled = true;

      // Executar primeira verifica√ß√£o
      await this.runAutomationCycle();

      // Configurar intervalo
      this.intervalId = setInterval(async () => {
        if (this.isRunning && this.config.enabled) {
          await this.runAutomationCycle();
        }
      }, this.config.checkInterval);

      console.log('‚úÖ Automa√ß√£o WhatsApp iniciada com sucesso');
      
      // Salvar log
      await this.saveAutomationLog('automation_started', {
        config: this.config,
        startTime: this.stats.startTime
      });

      return { 
        success: true, 
        message: 'Automa√ß√£o iniciada com sucesso',
        config: this.config
      };
    } catch (error) {
      console.error('‚ùå Erro ao iniciar automa√ß√£o:', error);
      this.isRunning = false;
      this.config.enabled = false;
      
      return { 
        success: false, 
        error: error.message 
      };
    }
  }

  // Parar automa√ß√£o
  async stopAutomation() {
    if (!this.isRunning) {
      console.warn('‚ö†Ô∏è Automa√ß√£o n√£o est√° rodando');
      return { success: false, error: 'Automa√ß√£o n√£o est√° ativa' };
    }

    try {
      console.log('üõë Parando automa√ß√£o WhatsApp...');
      
      this.isRunning = false;
      this.config.enabled = false;
      
      if (this.intervalId) {
        clearInterval(this.intervalId);
        this.intervalId = null;
      }

      console.log('‚úÖ Automa√ß√£o WhatsApp parada');
      
      // Salvar log
      await this.saveAutomationLog('automation_stopped', {
        stats: this.stats,
        duration: new Date() - this.stats.startTime
      });

      return { 
        success: true, 
        message: 'Automa√ß√£o parada com sucesso' 
      };
    } catch (error) {
      console.error('‚ùå Erro ao parar automa√ß√£o:', error);
      return { 
        success: false, 
        error: error.message 
      };
    }
  }

  // Executar ciclo manual
  async runManualCycle() {
    console.log('üîÑ Executando ciclo manual de automa√ß√£o...');
    
    try {
      const result = await this.runAutomationCycle();
      return {
        success: true,
        ...result
      };
    } catch (error) {
      console.error('‚ùå Erro no ciclo manual:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  // =============================================
  // CICLO DE AUTOMA√á√ÉO
  // =============================================

  // Executar ciclo completo de automa√ß√£o
  async runAutomationCycle() {
    try {
      console.log('üîÑ Executando ciclo de automa√ß√£o...');
      this.stats.lastRun = new Date();

      // Verificar hor√°rio comercial
      if (!this.isBusinessHours()) {
        console.log('‚è∞ Fora do hor√°rio comercial, pulando ciclo');
        return {
          skipped: true,
          reason: 'Fora do hor√°rio comercial',
          nextCheck: this.getNextBusinessHour()
        };
      }

      // Verificar conex√£o WhatsApp
      const connectionStatus = await whatsappService.checkConnection();
      if (!connectionStatus.connected) {
        throw new Error('WhatsApp desconectado');
      }

      // Buscar dados necess√°rios
      const [clients, invoices, subscriptions] = await Promise.all([
        this.getClients(),
        this.getInvoices(),
        this.getSubscriptions()
      ]);

      // Calcular notifica√ß√µes pendentes
      const pendingNotifications = await this.calculatePendingNotifications(
        invoices, 
        clients, 
        subscriptions
      );

      // Filtrar notifica√ß√µes que n√£o foram enviadas hoje
      const filteredNotifications = await this.filterTodaysMessages(pendingNotifications);

      console.log(`üìä Notifica√ß√µes encontradas: ${filteredNotifications.length}`);

      let sent = 0;
      let errors = 0;

      // Processar notifica√ß√µes
      for (const notification of filteredNotifications) {
        try {
          const result = await this.processNotification(notification);
          if (result.success) {
            sent++;
            this.stats.messagesSent++; // CORRE√á√ÉO: Nome corrigido
          } else {
            errors++;
            this.stats.errors++;
          }

          // Delay entre mensagens
          if (filteredNotifications.indexOf(notification) < filteredNotifications.length - 1) {
            await this.delay(this.config.delayBetweenMessages);
          }
        } catch (error) {
          console.error('‚ùå Erro ao processar notifica√ß√£o:', error);
          errors++;
          this.stats.errors++;
        }
      }

      const cycleResult = {
        processed: filteredNotifications.length,
        sent,
        errors,
        timestamp: new Date(),
        businessHours: true
      };

      // Salvar log do ciclo
      await this.saveAutomationLog('cycle_completed', cycleResult);

      console.log(`‚úÖ Ciclo conclu√≠do: ${sent} enviados, ${errors} erros`);

      return cycleResult;
    } catch (error) {
      console.error('‚ùå Erro no ciclo de automa√ß√£o:', error);
      this.stats.errors++;
      
      await this.saveAutomationLog('cycle_error', {
        error: error.message,
        timestamp: new Date()
      });

      throw error;
    }
  }

  // =============================================
  // PROCESSAMENTO DE NOTIFICA√á√ïES
  // =============================================

  // Calcular notifica√ß√µes pendentes
  async calculatePendingNotifications(invoices, clients, subscriptions) {
    const notifications = [];

    for (const invoice of invoices) {
      if (!['pending', 'overdue'].includes(invoice.status)) continue;

      const client = clients.find(c => c.id === invoice.clientId);
      if (!client || !client.phone) continue;

      const subscription = subscriptions.find(s => s.id === invoice.subscriptionId);
      const daysDiff = getDaysDifference(invoice.dueDate);

      // Lembretes (antes do vencimento)
      if (daysDiff >= 0 && daysDiff <= this.config.reminderDays) {
        notifications.push({
          type: 'reminder',
          priority: 2,
          invoice,
          client,
          subscription,
          daysDiff
        });
      }

      // Cobran√ßas vencidas (escalonamento)
      if (daysDiff < 0) {
        const daysOverdue = Math.abs(daysDiff);
        
        if (this.config.overdueScalation.includes(daysOverdue)) {
          notifications.push({
            type: 'overdue',
            priority: 1, // Maior prioridade
            invoice,
            client,
            subscription,
            daysOverdue
          });
        }
      }

      // Novas faturas (geradas hoje)
      if (invoice.generationDate === getCurrentDate() && invoice.status === 'pending') {
        notifications.push({
          type: 'new_invoice',
          priority: 3,
          invoice,
          client,
          subscription,
          daysDiff: 0
        });
      }
    }

    // Ordenar por prioridade
    return notifications.sort((a, b) => a.priority - b.priority);
  }

  // Filtrar mensagens j√° enviadas hoje
  async filterTodaysMessages(notifications) {
    const filtered = [];

    for (const notification of notifications) {
      const alreadySent = await whatsappService.wasMessageSentToday(
        notification.client.id,
        notification.type
      );

      if (!alreadySent) {
        filtered.push(notification);
      } else {
        console.log(`‚è≠Ô∏è Mensagem j√° enviada hoje: ${notification.type} para ${notification.client.name}`);
      }
    }

    return filtered;
  }

  // Processar notifica√ß√£o individual
  async processNotification(notification) {
    const { type, invoice, client, subscription } = notification;
    
    console.log(`üì§ Processando: ${type} para ${client.name}`);

    try {
      let result;

      switch (type) {
        case 'overdue':
          result = await whatsappService.sendOverdueNotification(invoice, client, subscription);
          break;
        case 'reminder':
          result = await whatsappService.sendReminderNotification(invoice, client, subscription);
          break;
        case 'new_invoice':
          result = await whatsappService.sendNewInvoiceNotification(invoice, client, subscription);
          break;
        default:
          throw new Error(`Tipo de notifica√ß√£o inv√°lido: ${type}`);
      }

      // Log da notifica√ß√£o processada
      await this.saveNotificationLog(notification, result);

      return result;
    } catch (error) {
      console.error(`‚ùå Erro ao processar ${type} para ${client.name}:`, error);
      
      await this.saveNotificationLog(notification, {
        success: false,
        error: error.message
      });

      return {
        success: false,
        error: error.message
      };
    }
  }

  // =============================================
  // FUN√á√ïES AUXILIARES
  // =============================================

  // Verificar se est√° em hor√°rio comercial
  isBusinessHours() {
    const now = new Date();
    const hour = now.getHours();
    const dayOfWeek = now.getDay(); // 0 = Domingo, 1 = Segunda, etc.

    // Verificar se √© dia √∫til
    if (!this.config.businessHours.workDays.includes(dayOfWeek)) {
      return false;
    }

    // Verificar se est√° no hor√°rio comercial
    return hour >= this.config.businessHours.start && hour < this.config.businessHours.end;
  }

  // Obter pr√≥ximo hor√°rio comercial
  getNextBusinessHour() {
    const now = new Date();
    const tomorrow = new Date(now);
    tomorrow.setDate(tomorrow.getDate() + 1);
    tomorrow.setHours(this.config.businessHours.start, 0, 0, 0);
    
    return tomorrow;
  }

  // Delay ass√≠ncrono
  async delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  // =============================================
  // ACESSO AOS DADOS
  // =============================================

  // Buscar clientes
  async getClients() {
    try {
      const snapshot = await getDocs(collection(db, 'clients'));
      return snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }));
    } catch (error) {
      console.error('‚ùå Erro ao buscar clientes:', error);
      return [];
    }
  }

  // Buscar faturas
  async getInvoices() {
    try {
      const snapshot = await getDocs(collection(db, 'invoices'));
      return snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }));
    } catch (error) {
      console.error('‚ùå Erro ao buscar faturas:', error);
      return [];
    }
  }

  // Buscar assinaturas
  async getSubscriptions() {
    try {
      const snapshot = await getDocs(collection(db, 'subscriptions'));
      return snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }));
    } catch (error) {
      console.error('‚ùå Erro ao buscar assinaturas:', error);
      return [];
    }
  }

  // =============================================
  // CONFIGURA√á√ïES
  // =============================================

  // Atualizar configura√ß√£o
  updateConfig(newConfig) {
    this.config = { ...this.config, ...newConfig };
    console.log('‚öôÔ∏è Configura√ß√£o da automa√ß√£o atualizada:', this.config);
    
    // Se estava rodando, reiniciar com nova configura√ß√£o
    if (this.isRunning) {
      this.stopAutomation().then(() => {
        this.startAutomation();
      });
    }
  }

  // Obter configura√ß√£o atual
  getConfig() {
    return { ...this.config };
  }

  // Obter estat√≠sticas
  getStats() {
    return {
      ...this.stats,
      isRunning: this.isRunning,
      uptime: this.stats.startTime ? new Date() - this.stats.startTime : 0,
      config: this.config
    };
  }

  // =============================================
  // LOGS E HIST√ìRICO
  // =============================================

  // Salvar log da automa√ß√£o
  async saveAutomationLog(action, data = {}) {
    try {
      await addDoc(collection(db, 'automation_logs'), {
        action,
        data,
        timestamp: new Date(),
        service: 'whatsapp_automation'
      });
    } catch (error) {
      console.error('‚ùå Erro ao salvar log da automa√ß√£o:', error);
    }
  }

  // Salvar log de notifica√ß√£o
  async saveNotificationLog(notification, result) {
    try {
      await addDoc(collection(db, 'notification_logs'), {
        type: notification.type,
        clientId: notification.client.id,
        clientName: notification.client.name,
        invoiceId: notification.invoice.id,
        invoiceAmount: notification.invoice.amount,
        subscriptionId: notification.subscription?.id || null,
        result,
        automated: true,
        timestamp: new Date()
      });
    } catch (error) {
      console.error('‚ùå Erro ao salvar log de notifica√ß√£o:', error);
    }
  }

  // CORRE√á√ÉO PRINCIPAL: Fun√ß√£o getAutomationLogs corrigida
  async getAutomationLogs(limitCount = 50) {
    try {
      const q = query(
        collection(db, 'automation_logs'),
        where('service', '==', 'whatsapp_automation'),
        orderBy('timestamp', 'desc'), // CORRE√á√ÉO: orderBy importado e usado corretamente
        limit(limitCount) // CORRE√á√ÉO: limit importado e usado corretamente
      );
      
      const snapshot = await getDocs(q);
      return snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        timestamp: doc.data().timestamp?.toDate()
      }));
    } catch (error) {
      console.error('‚ùå Erro ao buscar logs:', error);
      return [];
    }
  }

  // =============================================
  // TESTES E DIAGN√ìSTICOS
  // =============================================

  // Testar automa√ß√£o (modo dry-run)
  async testAutomation() {
    console.log('üß™ Testando automa√ß√£o (modo dry-run)...');
    
    try {
      // Buscar dados
      const [clients, invoices, subscriptions] = await Promise.all([
        this.getClients(),
        this.getInvoices(),
        this.getSubscriptions()
      ]);

      // Calcular notifica√ß√µes
      const pendingNotifications = await this.calculatePendingNotifications(
        invoices,
        clients,
        subscriptions
      );

      // Filtrar mensagens de hoje
      const filteredNotifications = await this.filterTodaysMessages(pendingNotifications);

      const testResult = {
        totalInvoices: invoices.length,
        totalClients: clients.length,
        totalSubscriptions: subscriptions.length,
        pendingNotifications: pendingNotifications.length,
        filteredNotifications: filteredNotifications.length,
        businessHours: this.isBusinessHours(),
        whatsappConnected: (await whatsappService.checkConnection()).connected,
        notifications: filteredNotifications.map(n => ({
          type: n.type,
          client: n.client.name,
          amount: n.invoice.amount,
          dueDate: n.invoice.dueDate,
          priority: n.priority
        })),
        config: this.config
      };

      console.log('‚úÖ Teste da automa√ß√£o conclu√≠do:', testResult);
      return testResult;
    } catch (error) {
      console.error('‚ùå Erro no teste da automa√ß√£o:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  // Verificar sa√∫de do sistema
  async checkHealth() {
    const health = {
      automation: {
        running: this.isRunning,
        enabled: this.config.enabled,
        lastRun: this.stats.lastRun,
        errors: this.stats.errors
      },
      whatsapp: await whatsappService.checkConnection(),
      businessHours: this.isBusinessHours(),
      database: true, // Assume que est√° ok se chegou at√© aqui
      timestamp: new Date()
    };

    try {
      // Testar acesso ao banco
      const testQuery = query(collection(db, 'clients'), limit(1)); // CORRE√á√ÉO: Uso correto da fun√ß√£o limit
      await getDocs(testQuery);
    } catch (error) {
      health.database = false;
      health.databaseError = error.message;
    }

    return health;
  }

  // =============================================
  // RELAT√ìRIOS
  // =============================================

  // CORRE√á√ÉO: Fun√ß√£o getPerformanceReport corrigida
  async getPerformanceReport(days = 7) {
    try {
      const since = new Date();
      since.setDate(since.getDate() - days);

      const q = query(
        collection(db, 'notification_logs'),
        where('automated', '==', true),
        where('timestamp', '>=', since),
        orderBy('timestamp', 'desc') // CORRE√á√ÉO: orderBy importado e usado corretamente
      );

      const snapshot = await getDocs(q);
      const logs = snapshot.docs.map(doc => ({
        ...doc.data(),
        timestamp: doc.data().timestamp?.toDate()
      }));

      const report = {
        period: `${days} dias`,
        totalNotifications: logs.length,
        successful: logs.filter(log => log.result?.success).length,
        failed: logs.filter(log => !log.result?.success).length,
        byType: {
          overdue: logs.filter(log => log.type === 'overdue').length,
          reminder: logs.filter(log => log.type === 'reminder').length,
          new_invoice: logs.filter(log => log.type === 'new_invoice').length
        },
        byDay: this.groupLogsByDay(logs),
        errors: logs.filter(log => !log.result?.success).map(log => ({
          client: log.clientName,
          type: log.type,
          error: log.result?.error,
          timestamp: log.timestamp
        })),
        stats: this.getStats()
      };

      return report;
    } catch (error) {
      console.error('‚ùå Erro ao gerar relat√≥rio:', error);
      return {
        error: error.message,
        period: `${days} dias`
      };
    }
  }

  // Agrupar logs por dia
  groupLogsByDay(logs) {
    const grouped = {};
    
    logs.forEach(log => {
      const day = log.timestamp?.toISOString().split('T')[0];
      if (!grouped[day]) {
        grouped[day] = { total: 0, successful: 0, failed: 0 };
      }
      
      grouped[day].total++;
      if (log.result?.success) {
        grouped[day].successful++;
      } else {
        grouped[day].failed++;
      }
    });

    return grouped;
  }

  // =============================================
  // CONTROLES DE EMERG√äNCIA
  // =============================================

  // Pausar temporariamente
  pause() {
    this.config.enabled = false;
    console.log('‚è∏Ô∏è Automa√ß√£o pausada temporariamente');
  }

  // Retomar
  resume() {
    this.config.enabled = true;
    console.log('‚ñ∂Ô∏è Automa√ß√£o retomada');
  }

  // Reset completo
  async reset() {
    console.log('üîÑ Fazendo reset da automa√ß√£o...');
    
    await this.stopAutomation();
    
    this.stats = {
      messagesSent: 0, // CORRE√á√ÉO: Nome corrigido
      errors: 0,
      lastRun: null,
      startTime: null
    };

    this.config = {
      enabled: false,
      checkInterval: 60000,
      businessHours: {
        start: 8,
        end: 18,
        workDays: [1, 2, 3, 4, 5]
      },
      reminderDays: 3,
      overdueScalation: [1, 3, 7, 15, 30],
      maxMessagesPerDay: 1,
      delayBetweenMessages: 5000
    };

    console.log('‚úÖ Reset da automa√ß√£o conclu√≠do');
    
    return {
      success: true,
      message: 'Automa√ß√£o resetada com sucesso'
    };
  }
}

// Inst√¢ncia singleton
const whatsappAutomationService = new WhatsAppAutomationService();

export { whatsappAutomationService };