{"ast":null,"code":"// src/services/firestore.js\nimport { collection, addDoc, getDocs, doc, updateDoc, query, orderBy, where, writeBatch, serverTimestamp, onSnapshot // Adicione esta importação\n} from 'firebase/firestore';\nimport { db } from './firebase';\n\n// Constantes das coleções\nexport const COLLECTIONS = {\n  CLIENTS: 'clients',\n  SUBSCRIPTIONS: 'subscriptions',\n  INVOICES: 'invoices'\n};\n\n// ***** CLIENTES *****\nexport const clientService = {\n  // Criar cliente\n  async create(clientData) {\n    try {\n      const docRef = await addDoc(collection(db, COLLECTIONS.CLIENTS), {\n        ...clientData,\n        createdAt: serverTimestamp(),\n        updatedAt: serverTimestamp()\n      });\n      console.log('✅ Cliente criado:', docRef.id);\n      return {\n        success: true,\n        id: docRef.id\n      };\n    } catch (error) {\n      console.error('❌ Erro ao criar cliente:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  },\n  // Listar todos os clientes\n  async getAll() {\n    try {\n      const q = query(collection(db, COLLECTIONS.CLIENTS), orderBy('createdAt', 'desc'));\n      const querySnapshot = await getDocs(q);\n      const clients = querySnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      console.log('✅ Clientes carregados:', clients.length);\n      return clients;\n    } catch (error) {\n      console.error('❌ Erro ao buscar clientes:', error);\n      return [];\n    }\n  },\n  // CORREÇÃO: Adicionar o método 'subscribe'\n  subscribe(callback) {\n    const q = query(collection(db, COLLECTIONS.CLIENTS), orderBy('createdAt', 'desc'));\n    const unsubscribe = onSnapshot(q, querySnapshot => {\n      const clients = querySnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      callback(clients);\n    });\n    return unsubscribe;\n  },\n  // Atualizar cliente\n  async update(clientId, clientData) {\n    try {\n      const clientRef = doc(db, COLLECTIONS.CLIENTS, clientId);\n      await updateDoc(clientRef, {\n        ...clientData,\n        updatedAt: serverTimestamp()\n      });\n      console.log('✅ Cliente atualizado:', clientId);\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('❌ Erro ao atualizar cliente:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  },\n  // Deletar cliente e dados relacionados\n  async delete(clientId) {\n    try {\n      const batch = writeBatch(db);\n\n      // Deletar assinaturas relacionadas\n      const subscriptionsQuery = query(collection(db, COLLECTIONS.SUBSCRIPTIONS), where('clientId', '==', clientId));\n      const subscriptionsSnapshot = await getDocs(subscriptionsQuery);\n      subscriptionsSnapshot.docs.forEach(doc => {\n        batch.delete(doc.ref);\n      });\n\n      // Deletar faturas relacionadas\n      const invoicesQuery = query(collection(db, COLLECTIONS.INVOICES), where('clientId', '==', clientId));\n      const invoicesSnapshot = await getDocs(invoicesQuery);\n      invoicesSnapshot.docs.forEach(doc => {\n        batch.delete(doc.ref);\n      });\n\n      // Deletar cliente\n      const clientRef = doc(db, COLLECTIONS.CLIENTS, clientId);\n      batch.delete(clientRef);\n      await batch.commit();\n      console.log('✅ Cliente deletado:', clientId);\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('❌ Erro ao deletar cliente:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n};\n\n// ***** ASSINATURAS *****\nexport const subscriptionService = {\n  // Criar assinatura\n  async create(subscriptionData) {\n    try {\n      const docRef = await addDoc(collection(db, COLLECTIONS.SUBSCRIPTIONS), {\n        ...subscriptionData,\n        createdAt: serverTimestamp(),\n        updatedAt: serverTimestamp()\n      });\n      console.log('✅ Assinatura criada:', docRef.id);\n      return {\n        success: true,\n        id: docRef.id\n      };\n    } catch (error) {\n      console.error('❌ Erro ao criar assinatura:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  },\n  // Listar todas as assinaturas\n  async getAll() {\n    try {\n      const q = query(collection(db, COLLECTIONS.SUBSCRIPTIONS), orderBy('createdAt', 'desc'));\n      const querySnapshot = await getDocs(q);\n      const subscriptions = querySnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      console.log('✅ Assinaturas carregadas:', subscriptions.length);\n      return subscriptions;\n    } catch (error) {\n      console.error('❌ Erro ao buscar assinaturas:', error);\n      return [];\n    }\n  },\n  // CORREÇÃO: Adicionar o método 'subscribe'\n  subscribe(callback) {\n    const q = query(collection(db, COLLECTIONS.SUBSCRIPTIONS), orderBy('createdAt', 'desc'));\n    const unsubscribe = onSnapshot(q, querySnapshot => {\n      const subscriptions = querySnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      callback(subscriptions);\n    });\n    return unsubscribe;\n  },\n  // Atualizar assinatura\n  async update(subscriptionId, subscriptionData) {\n    try {\n      const subscriptionRef = doc(db, COLLECTIONS.SUBSCRIPTIONS, subscriptionId);\n      await updateDoc(subscriptionRef, {\n        ...subscriptionData,\n        updatedAt: serverTimestamp()\n      });\n      console.log('✅ Assinatura atualizada:', subscriptionId);\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('❌ Erro ao atualizar assinatura:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n};\n\n// ***** FATURAS *****\nexport const invoiceService = {\n  // Criar fatura\n  async create(invoiceData) {\n    try {\n      const docRef = await addDoc(collection(db, COLLECTIONS.INVOICES), {\n        ...invoiceData,\n        createdAt: serverTimestamp(),\n        updatedAt: serverTimestamp()\n      });\n      console.log('✅ Fatura criada:', docRef.id);\n      return {\n        success: true,\n        id: docRef.id\n      };\n    } catch (error) {\n      console.error('❌ Erro ao criar fatura:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  },\n  // Listar todas as faturas\n  async getAll() {\n    try {\n      const q = query(collection(db, COLLECTIONS.INVOICES), orderBy('generationDate', 'desc'));\n      const querySnapshot = await getDocs(q);\n      const invoices = querySnapshot.docs.map(doc => {\n        var _data$generationDate, _data$generationDate$, _data$dueDate, _data$dueDate$toDate, _data$createdAt, _data$createdAt$toDat, _data$updatedAt, _data$updatedAt$toDat;\n        const data = doc.data();\n        return {\n          id: doc.id,\n          ...data,\n          // Converter Timestamps do Firebase para Date\n          generationDate: ((_data$generationDate = data.generationDate) === null || _data$generationDate === void 0 ? void 0 : (_data$generationDate$ = _data$generationDate.toDate) === null || _data$generationDate$ === void 0 ? void 0 : _data$generationDate$.call(_data$generationDate)) || data.generationDate,\n          dueDate: ((_data$dueDate = data.dueDate) === null || _data$dueDate === void 0 ? void 0 : (_data$dueDate$toDate = _data$dueDate.toDate) === null || _data$dueDate$toDate === void 0 ? void 0 : _data$dueDate$toDate.call(_data$dueDate)) || data.dueDate,\n          createdAt: ((_data$createdAt = data.createdAt) === null || _data$createdAt === void 0 ? void 0 : (_data$createdAt$toDat = _data$createdAt.toDate) === null || _data$createdAt$toDat === void 0 ? void 0 : _data$createdAt$toDat.call(_data$createdAt)) || data.createdAt,\n          updatedAt: ((_data$updatedAt = data.updatedAt) === null || _data$updatedAt === void 0 ? void 0 : (_data$updatedAt$toDat = _data$updatedAt.toDate) === null || _data$updatedAt$toDat === void 0 ? void 0 : _data$updatedAt$toDat.call(_data$updatedAt)) || data.updatedAt\n        };\n      });\n      console.log('✅ Faturas carregadas:', invoices.length);\n      return invoices;\n    } catch (error) {\n      console.error('❌ Erro ao buscar faturas:', error);\n      return [];\n    }\n  },\n  // CORREÇÃO: Adicionar o método 'subscribe'\n  subscribe(callback) {\n    const q = query(collection(db, COLLECTIONS.INVOICES), orderBy('generationDate', 'desc'));\n    const unsubscribe = onSnapshot(q, querySnapshot => {\n      const invoices = querySnapshot.docs.map(doc => {\n        var _data$generationDate2, _data$generationDate3, _data$dueDate2, _data$dueDate2$toDate, _data$createdAt2, _data$createdAt2$toDa, _data$updatedAt2, _data$updatedAt2$toDa;\n        const data = doc.data();\n        return {\n          id: doc.id,\n          ...data,\n          generationDate: ((_data$generationDate2 = data.generationDate) === null || _data$generationDate2 === void 0 ? void 0 : (_data$generationDate3 = _data$generationDate2.toDate) === null || _data$generationDate3 === void 0 ? void 0 : _data$generationDate3.call(_data$generationDate2)) || data.generationDate,\n          dueDate: ((_data$dueDate2 = data.dueDate) === null || _data$dueDate2 === void 0 ? void 0 : (_data$dueDate2$toDate = _data$dueDate2.toDate) === null || _data$dueDate2$toDate === void 0 ? void 0 : _data$dueDate2$toDate.call(_data$dueDate2)) || data.dueDate,\n          createdAt: ((_data$createdAt2 = data.createdAt) === null || _data$createdAt2 === void 0 ? void 0 : (_data$createdAt2$toDa = _data$createdAt2.toDate) === null || _data$createdAt2$toDa === void 0 ? void 0 : _data$createdAt2$toDa.call(_data$createdAt2)) || data.createdAt,\n          updatedAt: ((_data$updatedAt2 = data.updatedAt) === null || _data$updatedAt2 === void 0 ? void 0 : (_data$updatedAt2$toDa = _data$updatedAt2.toDate) === null || _data$updatedAt2$toDa === void 0 ? void 0 : _data$updatedAt2$toDa.call(_data$updatedAt2)) || data.updatedAt\n        };\n      });\n      callback(invoices);\n    });\n    return unsubscribe;\n  },\n  // Atualizar fatura\n  async update(invoiceId, invoiceData) {\n    try {\n      const invoiceRef = doc(db, COLLECTIONS.INVOICES, invoiceId);\n      await updateDoc(invoiceRef, {\n        ...invoiceData,\n        updatedAt: serverTimestamp()\n      });\n      console.log('✅ Fatura atualizada:', invoiceId);\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('❌ Erro ao atualizar fatura:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n};\n\n// ***** DADOS DE EXEMPLO *****\nexport const seedService = {\n  // Criar dados de exemplo\n  async createSampleData() {\n    try {\n      console.log('🌱 Iniciando criação de dados de exemplo...');\n      // Clientes de exemplo\n      const sampleClients = [{\n        name: 'João da Silva',\n        email: 'joao@email.com',\n        phone: '(11) 99999-1111',\n        cpf: '123.456.789-00',\n        pix: 'joao@email.com'\n      }, {\n        name: 'Maria Santos',\n        email: 'maria@email.com',\n        phone: '(11) 99999-2222',\n        cpf: '987.654.321-00',\n        pix: 'maria@email.com'\n      }, {\n        name: 'Pedro Costa',\n        email: 'pedro@email.com',\n        phone: '(11) 99999-3333',\n        cpf: '456.789.123-00',\n        pix: 'pedro@email.com'\n      }];\n\n      // Criar clientes\n      const createdClients = [];\n      for (const client of sampleClients) {\n        const result = await clientService.create(client);\n        if (result.success) {\n          createdClients.push({\n            id: result.id,\n            ...client\n          });\n        }\n      }\n\n      // Criar assinaturas para os clientes\n      const subscriptions = [{\n        clientId: createdClients[0].id,\n        clientName: createdClients[0].name,\n        amount: 150.00,\n        dayOfWeek: 'monday',\n        startDate: '2024-01-01',\n        status: 'active'\n      }, {\n        clientId: createdClients[1].id,\n        clientName: createdClients[1].name,\n        amount: 200.00,\n        dayOfWeek: 'wednesday',\n        startDate: '2024-01-01',\n        status: 'active'\n      }];\n      for (const subscription of subscriptions) {\n        await subscriptionService.create(subscription);\n      }\n\n      // Criar algumas faturas de exemplo\n      const today = new Date();\n      const invoices = [{\n        clientId: createdClients[0].id,\n        clientName: createdClients[0].name,\n        amount: 150.00,\n        generationDate: new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n        dueDate: new Date(today.getTime() - 5 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n        status: 'paid'\n      }, {\n        clientId: createdClients[1].id,\n        clientName: createdClients[1].name,\n        amount: 200.00,\n        generationDate: today.toISOString().split('T')[0],\n        dueDate: new Date(today.getTime() + 2 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n        status: 'pending'\n      }, {\n        clientId: createdClients[2].id,\n        clientName: createdClients[2].name,\n        amount: 175.00,\n        generationDate: new Date(today.getTime() - 10 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n        dueDate: new Date(today.getTime() - 3 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n        status: 'overdue'\n      }];\n      for (const invoice of invoices) {\n        await invoiceService.create(invoice);\n      }\n      console.log('✅ Dados de exemplo criados com sucesso!');\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('❌ Erro ao criar dados de exemplo:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n};","map":{"version":3,"names":["collection","addDoc","getDocs","doc","updateDoc","query","orderBy","where","writeBatch","serverTimestamp","onSnapshot","db","COLLECTIONS","CLIENTS","SUBSCRIPTIONS","INVOICES","clientService","create","clientData","docRef","createdAt","updatedAt","console","log","id","success","error","message","getAll","q","querySnapshot","clients","docs","map","data","length","subscribe","callback","unsubscribe","update","clientId","clientRef","delete","batch","subscriptionsQuery","subscriptionsSnapshot","forEach","ref","invoicesQuery","invoicesSnapshot","commit","subscriptionService","subscriptionData","subscriptions","subscriptionId","subscriptionRef","invoiceService","invoiceData","invoices","_data$generationDate","_data$generationDate$","_data$dueDate","_data$dueDate$toDate","_data$createdAt","_data$createdAt$toDat","_data$updatedAt","_data$updatedAt$toDat","generationDate","toDate","call","dueDate","_data$generationDate2","_data$generationDate3","_data$dueDate2","_data$dueDate2$toDate","_data$createdAt2","_data$createdAt2$toDa","_data$updatedAt2","_data$updatedAt2$toDa","invoiceId","invoiceRef","seedService","createSampleData","sampleClients","name","email","phone","cpf","pix","createdClients","client","result","push","clientName","amount","dayOfWeek","startDate","status","subscription","today","Date","getTime","toISOString","split","invoice"],"sources":["C:/Users/LEVI/Desktop/Gestao-de-cobrancas/src/hooks/useFirestore.js"],"sourcesContent":["// src/services/firestore.js\r\nimport {\r\n  collection,\r\n  addDoc,\r\n  getDocs,\r\n  doc,\r\n  updateDoc,\r\n  query,\r\n  orderBy,\r\n  where,\r\n  writeBatch,\r\n  serverTimestamp,\r\n  onSnapshot // Adicione esta importação\r\n} from 'firebase/firestore';\r\nimport { db } from './firebase';\r\n\r\n// Constantes das coleções\r\nexport const COLLECTIONS = {\r\n  CLIENTS: 'clients',\r\n  SUBSCRIPTIONS: 'subscriptions',\r\n  INVOICES: 'invoices'\r\n};\r\n\r\n// ***** CLIENTES *****\r\nexport const clientService = {\r\n  // Criar cliente\r\n  async create(clientData) {\r\n    try {\r\n      const docRef = await addDoc(collection(db, COLLECTIONS.CLIENTS), {\r\n        ...clientData,\r\n        createdAt: serverTimestamp(),\r\n        updatedAt: serverTimestamp()\r\n      });\r\n      console.log('✅ Cliente criado:', docRef.id);\r\n      return { success: true, id: docRef.id };\r\n    } catch (error) {\r\n      console.error('❌ Erro ao criar cliente:', error);\r\n      return { success: false, error: error.message };\r\n    }\r\n  },\r\n\r\n  // Listar todos os clientes\r\n  async getAll() {\r\n    try {\r\n      const q = query(\r\n        collection(db, COLLECTIONS.CLIENTS),\r\n        orderBy('createdAt', 'desc')\r\n      );\r\n      const querySnapshot = await getDocs(q);\r\n      const clients = querySnapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      }));\r\n      console.log('✅ Clientes carregados:', clients.length);\r\n      return clients;\r\n    } catch (error) {\r\n      console.error('❌ Erro ao buscar clientes:', error);\r\n      return [];\r\n    }\r\n  },\r\n  \r\n  // CORREÇÃO: Adicionar o método 'subscribe'\r\n  subscribe(callback) {\r\n    const q = query(\r\n      collection(db, COLLECTIONS.CLIENTS),\r\n      orderBy('createdAt', 'desc')\r\n    );\r\n    const unsubscribe = onSnapshot(q, (querySnapshot) => {\r\n      const clients = querySnapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      }));\r\n      callback(clients);\r\n    });\r\n    return unsubscribe;\r\n  },\r\n\r\n  // Atualizar cliente\r\n  async update(clientId, clientData) {\r\n    try {\r\n      const clientRef = doc(db, COLLECTIONS.CLIENTS, clientId);\r\n      await updateDoc(clientRef, {\r\n        ...clientData,\r\n        updatedAt: serverTimestamp()\r\n      });\r\n      console.log('✅ Cliente atualizado:', clientId);\r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('❌ Erro ao atualizar cliente:', error);\r\n      return { success: false, error: error.message };\r\n    }\r\n  },\r\n\r\n  // Deletar cliente e dados relacionados\r\n  async delete(clientId) {\r\n    try {\r\n      const batch = writeBatch(db);\r\n\r\n      // Deletar assinaturas relacionadas\r\n      const subscriptionsQuery = query(\r\n        collection(db, COLLECTIONS.SUBSCRIPTIONS),\r\n        where('clientId', '==', clientId)\r\n      );\r\n      const subscriptionsSnapshot = await getDocs(subscriptionsQuery);\r\n      subscriptionsSnapshot.docs.forEach(doc => {\r\n        batch.delete(doc.ref);\r\n      });\r\n\r\n      // Deletar faturas relacionadas\r\n      const invoicesQuery = query(\r\n        collection(db, COLLECTIONS.INVOICES),\r\n        where('clientId', '==', clientId)\r\n      );\r\n      const invoicesSnapshot = await getDocs(invoicesQuery);\r\n      invoicesSnapshot.docs.forEach(doc => {\r\n        batch.delete(doc.ref);\r\n      });\r\n\r\n      // Deletar cliente\r\n      const clientRef = doc(db, COLLECTIONS.CLIENTS, clientId);\r\n      batch.delete(clientRef);\r\n      \r\n      await batch.commit();\r\n      console.log('✅ Cliente deletado:', clientId);\r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('❌ Erro ao deletar cliente:', error);\r\n      return { success: false, error: error.message };\r\n    }\r\n  }\r\n};\r\n\r\n// ***** ASSINATURAS *****\r\nexport const subscriptionService = {\r\n  // Criar assinatura\r\n  async create(subscriptionData) {\r\n    try {\r\n      const docRef = await addDoc(collection(db, COLLECTIONS.SUBSCRIPTIONS), {\r\n        ...subscriptionData,\r\n        createdAt: serverTimestamp(),\r\n        updatedAt: serverTimestamp()\r\n      });\r\n      console.log('✅ Assinatura criada:', docRef.id);\r\n      return { success: true, id: docRef.id };\r\n    } catch (error) {\r\n      console.error('❌ Erro ao criar assinatura:', error);\r\n      return { success: false, error: error.message };\r\n    }\r\n  },\r\n\r\n  // Listar todas as assinaturas\r\n  async getAll() {\r\n    try {\r\n      const q = query(\r\n        collection(db, COLLECTIONS.SUBSCRIPTIONS),\r\n        orderBy('createdAt', 'desc')\r\n      );\r\n      const querySnapshot = await getDocs(q);\r\n      const subscriptions = querySnapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      }));\r\n      console.log('✅ Assinaturas carregadas:', subscriptions.length);\r\n      return subscriptions;\r\n    } catch (error) {\r\n      console.error('❌ Erro ao buscar assinaturas:', error);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  // CORREÇÃO: Adicionar o método 'subscribe'\r\n  subscribe(callback) {\r\n    const q = query(\r\n      collection(db, COLLECTIONS.SUBSCRIPTIONS),\r\n      orderBy('createdAt', 'desc')\r\n    );\r\n    const unsubscribe = onSnapshot(q, (querySnapshot) => {\r\n      const subscriptions = querySnapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      }));\r\n      callback(subscriptions);\r\n    });\r\n    return unsubscribe;\r\n  },\r\n\r\n  // Atualizar assinatura\r\n  async update(subscriptionId, subscriptionData) {\r\n    try {\r\n      const subscriptionRef = doc(db, COLLECTIONS.SUBSCRIPTIONS, subscriptionId);\r\n      await updateDoc(subscriptionRef, {\r\n        ...subscriptionData,\r\n        updatedAt: serverTimestamp()\r\n      });\r\n      console.log('✅ Assinatura atualizada:', subscriptionId);\r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('❌ Erro ao atualizar assinatura:', error);\r\n      return { success: false, error: error.message };\r\n    }\r\n  }\r\n};\r\n\r\n// ***** FATURAS *****\r\nexport const invoiceService = {\r\n  // Criar fatura\r\n  async create(invoiceData) {\r\n    try {\r\n      const docRef = await addDoc(collection(db, COLLECTIONS.INVOICES), {\r\n        ...invoiceData,\r\n        createdAt: serverTimestamp(),\r\n        updatedAt: serverTimestamp()\r\n      });\r\n      console.log('✅ Fatura criada:', docRef.id);\r\n      return { success: true, id: docRef.id };\r\n    } catch (error) {\r\n      console.error('❌ Erro ao criar fatura:', error);\r\n      return { success: false, error: error.message };\r\n    }\r\n  },\r\n\r\n  // Listar todas as faturas\r\n  async getAll() {\r\n    try {\r\n      const q = query(\r\n        collection(db, COLLECTIONS.INVOICES),\r\n        orderBy('generationDate', 'desc')\r\n      );\r\n      const querySnapshot = await getDocs(q);\r\n      const invoices = querySnapshot.docs.map(doc => {\r\n        const data = doc.data();\r\n        return {\r\n          id: doc.id,\r\n          ...data,\r\n          // Converter Timestamps do Firebase para Date\r\n          generationDate: data.generationDate?.toDate?.() || data.generationDate,\r\n          dueDate: data.dueDate?.toDate?.() || data.dueDate,\r\n          createdAt: data.createdAt?.toDate?.() || data.createdAt,\r\n          updatedAt: data.updatedAt?.toDate?.() || data.updatedAt\r\n        };\r\n      });\r\n      console.log('✅ Faturas carregadas:', invoices.length);\r\n      return invoices;\r\n    } catch (error) {\r\n      console.error('❌ Erro ao buscar faturas:', error);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  // CORREÇÃO: Adicionar o método 'subscribe'\r\n  subscribe(callback) {\r\n    const q = query(\r\n      collection(db, COLLECTIONS.INVOICES),\r\n      orderBy('generationDate', 'desc')\r\n    );\r\n    const unsubscribe = onSnapshot(q, (querySnapshot) => {\r\n      const invoices = querySnapshot.docs.map(doc => {\r\n        const data = doc.data();\r\n        return {\r\n          id: doc.id,\r\n          ...data,\r\n          generationDate: data.generationDate?.toDate?.() || data.generationDate,\r\n          dueDate: data.dueDate?.toDate?.() || data.dueDate,\r\n          createdAt: data.createdAt?.toDate?.() || data.createdAt,\r\n          updatedAt: data.updatedAt?.toDate?.() || data.updatedAt\r\n        };\r\n      });\r\n      callback(invoices);\r\n    });\r\n    return unsubscribe;\r\n  },\r\n\r\n  // Atualizar fatura\r\n  async update(invoiceId, invoiceData) {\r\n    try {\r\n      const invoiceRef = doc(db, COLLECTIONS.INVOICES, invoiceId);\r\n      await updateDoc(invoiceRef, {\r\n        ...invoiceData,\r\n        updatedAt: serverTimestamp()\r\n      });\r\n      console.log('✅ Fatura atualizada:', invoiceId);\r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('❌ Erro ao atualizar fatura:', error);\r\n      return { success: false, error: error.message };\r\n    }\r\n  }\r\n};\r\n\r\n// ***** DADOS DE EXEMPLO *****\r\nexport const seedService = {\r\n  // Criar dados de exemplo\r\n  async createSampleData() {\r\n    try {\r\n      console.log('🌱 Iniciando criação de dados de exemplo...');\r\n      // Clientes de exemplo\r\n      const sampleClients = [\r\n        {\r\n          name: 'João da Silva',\r\n          email: 'joao@email.com',\r\n          phone: '(11) 99999-1111',\r\n          cpf: '123.456.789-00',\r\n          pix: 'joao@email.com'\r\n        },\r\n        {\r\n          name: 'Maria Santos',\r\n          email: 'maria@email.com',\r\n          phone: '(11) 99999-2222',\r\n          cpf: '987.654.321-00',\r\n          pix: 'maria@email.com'\r\n        },\r\n        {\r\n          name: 'Pedro Costa',\r\n          email: 'pedro@email.com',\r\n          phone: '(11) 99999-3333',\r\n          cpf: '456.789.123-00',\r\n          pix: 'pedro@email.com'\r\n        }\r\n      ];\r\n\r\n      // Criar clientes\r\n      const createdClients = [];\r\n      for (const client of sampleClients) {\r\n        const result = await clientService.create(client);\r\n        if (result.success) {\r\n          createdClients.push({ id: result.id, ...client });\r\n        }\r\n      }\r\n\r\n      // Criar assinaturas para os clientes\r\n      const subscriptions = [\r\n        {\r\n          clientId: createdClients[0].id,\r\n          clientName: createdClients[0].name,\r\n          amount: 150.00,\r\n          dayOfWeek: 'monday',\r\n          startDate: '2024-01-01',\r\n          status: 'active'\r\n        },\r\n        {\r\n          clientId: createdClients[1].id,\r\n          clientName: createdClients[1].name,\r\n          amount: 200.00,\r\n          dayOfWeek: 'wednesday',\r\n          startDate: '2024-01-01',\r\n          status: 'active'\r\n        }\r\n      ];\r\n      for (const subscription of subscriptions) {\r\n        await subscriptionService.create(subscription);\r\n      }\r\n\r\n      // Criar algumas faturas de exemplo\r\n      const today = new Date();\r\n      const invoices = [\r\n        {\r\n          clientId: createdClients[0].id,\r\n          clientName: createdClients[0].name,\r\n          amount: 150.00,\r\n          generationDate: new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\r\n          dueDate: new Date(today.getTime() - 5 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\r\n          status: 'paid'\r\n        },\r\n        {\r\n          clientId: createdClients[1].id,\r\n          clientName: createdClients[1].name,\r\n          amount: 200.00,\r\n          generationDate: today.toISOString().split('T')[0],\r\n          dueDate: new Date(today.getTime() + 2 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\r\n          status: 'pending'\r\n        },\r\n        {\r\n          clientId: createdClients[2].id,\r\n          clientName: createdClients[2].name,\r\n          amount: 175.00,\r\n          generationDate: new Date(today.getTime() - 10 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\r\n          dueDate: new Date(today.getTime() - 3 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\r\n          status: 'overdue'\r\n        }\r\n      ];\r\n      for (const invoice of invoices) {\r\n        await invoiceService.create(invoice);\r\n      }\r\n\r\n      console.log('✅ Dados de exemplo criados com sucesso!');\r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('❌ Erro ao criar dados de exemplo:', error);\r\n      return { success: false, error: error.message };\r\n    }\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}