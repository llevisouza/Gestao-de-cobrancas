{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { createClient as createClientService, updateClient as updateClientService, deleteClient as deleteClientService, createSubscription as createSubscriptionService, updateSubscription as updateSubscriptionService, deleteSubscription as deleteSubscriptionService, createInvoice as createInvoiceService, updateInvoice as updateInvoiceService, deleteInvoice as deleteInvoiceService, subscribeToClients, subscribeToSubscriptions, subscribeToInvoices, generateInvoicesForActiveSubscriptions, createExampleDataService } from '../services/firestore';\nimport { addMonths, isOverdue } from '../utils/dateUtils';\nexport const useFirestore = () => {\n  _s();\n  const [clients, setClients] = useState([]);\n  const [subscriptions, setSubscriptions] = useState([]);\n  const [invoices, setInvoices] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    setLoading(true);\n\n    // Subscrever aos dados em tempo real\n    const unsubscribeClients = subscribeToClients(data => {\n      console.log('Clientes atualizados:', data.length);\n      setClients(data);\n    }, err => {\n      console.error('Erro ao buscar clientes:', err);\n      setError(err);\n    });\n    const unsubscribeSubscriptions = subscribeToSubscriptions(data => {\n      console.log('Assinaturas atualizadas:', data.length);\n      setSubscriptions(data);\n    }, err => {\n      console.error('Erro ao buscar assinaturas:', err);\n      setError(err);\n    });\n    const unsubscribeInvoices = subscribeToInvoices(data => {\n      console.log('Faturas atualizadas:', data.length);\n      // Atualizar status das faturas vencidas\n      const updatedInvoices = data.map(invoice => {\n        return {\n          ...invoice,\n          status: invoice.status === 'pending' && isOverdue(invoice.dueDate) ? 'overdue' : invoice.status\n        };\n      });\n      setInvoices(updatedInvoices);\n    }, err => {\n      console.error('Erro ao buscar faturas:', err);\n      setError(err);\n    });\n\n    // Definir loading como false após um pequeno delay para garantir que os dados foram carregados\n    setTimeout(() => {\n      setLoading(false);\n    }, 1000);\n\n    // Cleanup das subscrições\n    return () => {\n      unsubscribeClients();\n      unsubscribeSubscriptions();\n      unsubscribeInvoices();\n    };\n  }, []);\n\n  // CRUD de Clientes\n  const createClient = async clientData => {\n    try {\n      setLoading(true);\n      const newClient = {\n        ...clientData,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n      await createClientService(newClient);\n      console.log('Cliente criado com sucesso');\n    } catch (error) {\n      console.error('Erro ao criar cliente:', error);\n      setError(error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const updateClient = async (clientId, clientData) => {\n    try {\n      setLoading(true);\n      const updatedClient = {\n        ...clientData,\n        updatedAt: new Date().toISOString()\n      };\n      await updateClientService(clientId, updatedClient);\n      console.log('Cliente atualizado com sucesso');\n    } catch (error) {\n      console.error('Erro ao atualizar cliente:', error);\n      setError(error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const deleteClient = async clientId => {\n    try {\n      setLoading(true);\n      // Verificar se o cliente possui assinaturas ativas\n      const clientSubscriptions = subscriptions.filter(sub => sub.clientId === clientId && sub.status === 'active');\n      if (clientSubscriptions.length > 0) {\n        throw new Error('Não é possível excluir cliente com assinaturas ativas');\n      }\n      await deleteClientService(clientId);\n      console.log('Cliente excluído com sucesso');\n    } catch (error) {\n      console.error('Erro ao excluir cliente:', error);\n      setError(error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // CRUD de Assinaturas\n  const createSubscription = async subscriptionData => {\n    try {\n      setLoading(true);\n      const newSubscription = {\n        ...subscriptionData,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n      await createSubscriptionService(newSubscription);\n      console.log('Assinatura criada com sucesso');\n    } catch (error) {\n      console.error('Erro ao criar assinatura:', error);\n      setError(error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const updateSubscription = async (subscriptionId, subscriptionData) => {\n    try {\n      setLoading(true);\n      const updatedSubscription = {\n        ...subscriptionData,\n        updatedAt: new Date().toISOString()\n      };\n      await updateSubscriptionService(subscriptionId, updatedSubscription);\n      console.log('Assinatura atualizada com sucesso');\n    } catch (error) {\n      console.error('Erro ao atualizar assinatura:', error);\n      setError(error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const deleteSubscription = async subscriptionId => {\n    try {\n      setLoading(true);\n      await deleteSubscriptionService(subscriptionId);\n      console.log('Assinatura excluída com sucesso');\n    } catch (error) {\n      console.error('Erro ao excluir assinatura:', error);\n      setError(error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // CRUD de Faturas\n  const createInvoice = async invoiceData => {\n    try {\n      setLoading(true);\n      const newInvoice = {\n        ...invoiceData,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n      await createInvoiceService(newInvoice);\n      console.log('Fatura criada com sucesso');\n    } catch (error) {\n      console.error('Erro ao criar fatura:', error);\n      setError(error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const updateInvoice = async (invoiceId, invoiceData) => {\n    try {\n      setLoading(true);\n      const updatedInvoice = {\n        ...invoiceData,\n        updatedAt: new Date().toISOString()\n      };\n      await updateInvoiceService(invoiceId, updatedInvoice);\n      console.log('Fatura atualizada com sucesso');\n    } catch (error) {\n      console.error('Erro ao atualizar fatura:', error);\n      setError(error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const deleteInvoice = async invoiceId => {\n    try {\n      setLoading(true);\n      await deleteInvoiceService(invoiceId);\n      console.log('Fatura excluída com sucesso');\n    } catch (error) {\n      console.error('Erro ao excluir fatura:', error);\n      setError(error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Funções especializadas\n  const generateInvoicesForMonth = async (month, year) => {\n    try {\n      setLoading(true);\n      console.log(`Gerando faturas para ${month}/${year}`);\n      const activeSubscriptions = subscriptions.filter(sub => sub.status === 'active');\n      console.log(`Encontradas ${activeSubscriptions.length} assinaturas ativas`);\n      if (activeSubscriptions.length === 0) {\n        throw new Error('Nenhuma assinatura ativa encontrada');\n      }\n      await generateInvoicesForActiveSubscriptions(month, year);\n      console.log('Faturas geradas com sucesso');\n    } catch (error) {\n      console.error('Erro ao gerar faturas:', error);\n      setError(error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const createExampleData = async () => {\n    try {\n      setLoading(true);\n      console.log('Criando dados de exemplo...');\n      await createExampleDataService();\n      console.log('Dados de exemplo criados com sucesso');\n    } catch (error) {\n      console.error('Erro ao criar dados de exemplo:', error);\n      setError(error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const markInvoiceAsPaid = async invoiceId => {\n    try {\n      await updateInvoice(invoiceId, {\n        status: 'paid',\n        paidDate: new Date().toISOString()\n      });\n    } catch (error) {\n      console.error('Erro ao marcar fatura como paga:', error);\n      throw error;\n    }\n  };\n  const markInvoiceAsPending = async invoiceId => {\n    try {\n      await updateInvoice(invoiceId, {\n        status: 'pending',\n        paidDate: null\n      });\n    } catch (error) {\n      console.error('Erro ao marcar fatura como pendente:', error);\n      throw error;\n    }\n  };\n  return {\n    // Estados\n    clients,\n    subscriptions,\n    invoices,\n    loading,\n    error,\n    // CRUD Clientes\n    createClient,\n    updateClient,\n    deleteClient,\n    // CRUD Assinaturas\n    createSubscription,\n    updateSubscription,\n    deleteSubscription,\n    // CRUD Faturas\n    createInvoice,\n    updateInvoice,\n    deleteInvoice,\n    markInvoiceAsPaid,\n    markInvoiceAsPending,\n    // Funções especializadas\n    generateInvoicesForMonth,\n    createExampleData\n  };\n};\n_s(useFirestore, \"dgCNXlFmEFGtvGWfcy7EoLdmCKE=\");","map":{"version":3,"names":["useState","useEffect","createClient","createClientService","updateClient","updateClientService","deleteClient","deleteClientService","createSubscription","createSubscriptionService","updateSubscription","updateSubscriptionService","deleteSubscription","deleteSubscriptionService","createInvoice","createInvoiceService","updateInvoice","updateInvoiceService","deleteInvoice","deleteInvoiceService","subscribeToClients","subscribeToSubscriptions","subscribeToInvoices","generateInvoicesForActiveSubscriptions","createExampleDataService","addMonths","isOverdue","useFirestore","_s","clients","setClients","subscriptions","setSubscriptions","invoices","setInvoices","loading","setLoading","error","setError","unsubscribeClients","data","console","log","length","err","unsubscribeSubscriptions","unsubscribeInvoices","updatedInvoices","map","invoice","status","dueDate","setTimeout","clientData","newClient","createdAt","Date","toISOString","updatedAt","clientId","updatedClient","clientSubscriptions","filter","sub","Error","subscriptionData","newSubscription","subscriptionId","updatedSubscription","invoiceData","newInvoice","invoiceId","updatedInvoice","generateInvoicesForMonth","month","year","activeSubscriptions","createExampleData","markInvoiceAsPaid","paidDate","markInvoiceAsPending"],"sources":["C:/Users/LEVI/Desktop/Gestao-de-cobrancas/src/hooks/useFirestore.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { \r\n  createClient as createClientService,\r\n  updateClient as updateClientService,\r\n  deleteClient as deleteClientService,\r\n  createSubscription as createSubscriptionService,\r\n  updateSubscription as updateSubscriptionService,\r\n  deleteSubscription as deleteSubscriptionService,\r\n  createInvoice as createInvoiceService,\r\n  updateInvoice as updateInvoiceService,\r\n  deleteInvoice as deleteInvoiceService,\r\n  subscribeToClients,\r\n  subscribeToSubscriptions,\r\n  subscribeToInvoices,\r\n  generateInvoicesForActiveSubscriptions,\r\n  createExampleDataService\r\n} from '../services/firestore';\r\nimport { addMonths, isOverdue } from '../utils/dateUtils';\r\n\r\nexport const useFirestore = () => {\r\n  const [clients, setClients] = useState([]);\r\n  const [subscriptions, setSubscriptions] = useState([]);\r\n  const [invoices, setInvoices] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    \r\n    // Subscrever aos dados em tempo real\r\n    const unsubscribeClients = subscribeToClients((data) => {\r\n      console.log('Clientes atualizados:', data.length);\r\n      setClients(data);\r\n    }, (err) => {\r\n      console.error('Erro ao buscar clientes:', err);\r\n      setError(err);\r\n    });\r\n\r\n    const unsubscribeSubscriptions = subscribeToSubscriptions((data) => {\r\n      console.log('Assinaturas atualizadas:', data.length);\r\n      setSubscriptions(data);\r\n    }, (err) => {\r\n      console.error('Erro ao buscar assinaturas:', err);\r\n      setError(err);\r\n    });\r\n\r\n    const unsubscribeInvoices = subscribeToInvoices((data) => {\r\n      console.log('Faturas atualizadas:', data.length);\r\n      // Atualizar status das faturas vencidas\r\n      const updatedInvoices = data.map(invoice => {\r\n        return {\r\n          ...invoice,\r\n          status: invoice.status === 'pending' && isOverdue(invoice.dueDate) \r\n            ? 'overdue' \r\n            : invoice.status\r\n        };\r\n      });\r\n      setInvoices(updatedInvoices);\r\n    }, (err) => {\r\n      console.error('Erro ao buscar faturas:', err);\r\n      setError(err);\r\n    });\r\n\r\n    // Definir loading como false após um pequeno delay para garantir que os dados foram carregados\r\n    setTimeout(() => {\r\n      setLoading(false);\r\n    }, 1000);\r\n\r\n    // Cleanup das subscrições\r\n    return () => {\r\n      unsubscribeClients();\r\n      unsubscribeSubscriptions();\r\n      unsubscribeInvoices();\r\n    };\r\n  }, []);\r\n\r\n  // CRUD de Clientes\r\n  const createClient = async (clientData) => {\r\n    try {\r\n      setLoading(true);\r\n      const newClient = {\r\n        ...clientData,\r\n        createdAt: new Date().toISOString(),\r\n        updatedAt: new Date().toISOString()\r\n      };\r\n      await createClientService(newClient);\r\n      console.log('Cliente criado com sucesso');\r\n    } catch (error) {\r\n      console.error('Erro ao criar cliente:', error);\r\n      setError(error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const updateClient = async (clientId, clientData) => {\r\n    try {\r\n      setLoading(true);\r\n      const updatedClient = {\r\n        ...clientData,\r\n        updatedAt: new Date().toISOString()\r\n      };\r\n      await updateClientService(clientId, updatedClient);\r\n      console.log('Cliente atualizado com sucesso');\r\n    } catch (error) {\r\n      console.error('Erro ao atualizar cliente:', error);\r\n      setError(error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const deleteClient = async (clientId) => {\r\n    try {\r\n      setLoading(true);\r\n      // Verificar se o cliente possui assinaturas ativas\r\n      const clientSubscriptions = subscriptions.filter(\r\n        sub => sub.clientId === clientId && sub.status === 'active'\r\n      );\r\n      \r\n      if (clientSubscriptions.length > 0) {\r\n        throw new Error('Não é possível excluir cliente com assinaturas ativas');\r\n      }\r\n\r\n      await deleteClientService(clientId);\r\n      console.log('Cliente excluído com sucesso');\r\n    } catch (error) {\r\n      console.error('Erro ao excluir cliente:', error);\r\n      setError(error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // CRUD de Assinaturas\r\n  const createSubscription = async (subscriptionData) => {\r\n    try {\r\n      setLoading(true);\r\n      const newSubscription = {\r\n        ...subscriptionData,\r\n        createdAt: new Date().toISOString(),\r\n        updatedAt: new Date().toISOString()\r\n      };\r\n      await createSubscriptionService(newSubscription);\r\n      console.log('Assinatura criada com sucesso');\r\n    } catch (error) {\r\n      console.error('Erro ao criar assinatura:', error);\r\n      setError(error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const updateSubscription = async (subscriptionId, subscriptionData) => {\r\n    try {\r\n      setLoading(true);\r\n      const updatedSubscription = {\r\n        ...subscriptionData,\r\n        updatedAt: new Date().toISOString()\r\n      };\r\n      await updateSubscriptionService(subscriptionId, updatedSubscription);\r\n      console.log('Assinatura atualizada com sucesso');\r\n    } catch (error) {\r\n      console.error('Erro ao atualizar assinatura:', error);\r\n      setError(error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const deleteSubscription = async (subscriptionId) => {\r\n    try {\r\n      setLoading(true);\r\n      await deleteSubscriptionService(subscriptionId);\r\n      console.log('Assinatura excluída com sucesso');\r\n    } catch (error) {\r\n      console.error('Erro ao excluir assinatura:', error);\r\n      setError(error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // CRUD de Faturas\r\n  const createInvoice = async (invoiceData) => {\r\n    try {\r\n      setLoading(true);\r\n      const newInvoice = {\r\n        ...invoiceData,\r\n        createdAt: new Date().toISOString(),\r\n        updatedAt: new Date().toISOString()\r\n      };\r\n      await createInvoiceService(newInvoice);\r\n      console.log('Fatura criada com sucesso');\r\n    } catch (error) {\r\n      console.error('Erro ao criar fatura:', error);\r\n      setError(error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const updateInvoice = async (invoiceId, invoiceData) => {\r\n    try {\r\n      setLoading(true);\r\n      const updatedInvoice = {\r\n        ...invoiceData,\r\n        updatedAt: new Date().toISOString()\r\n      };\r\n      await updateInvoiceService(invoiceId, updatedInvoice);\r\n      console.log('Fatura atualizada com sucesso');\r\n    } catch (error) {\r\n      console.error('Erro ao atualizar fatura:', error);\r\n      setError(error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const deleteInvoice = async (invoiceId) => {\r\n    try {\r\n      setLoading(true);\r\n      await deleteInvoiceService(invoiceId);\r\n      console.log('Fatura excluída com sucesso');\r\n    } catch (error) {\r\n      console.error('Erro ao excluir fatura:', error);\r\n      setError(error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Funções especializadas\r\n  const generateInvoicesForMonth = async (month, year) => {\r\n    try {\r\n      setLoading(true);\r\n      console.log(`Gerando faturas para ${month}/${year}`);\r\n      \r\n      const activeSubscriptions = subscriptions.filter(sub => sub.status === 'active');\r\n      console.log(`Encontradas ${activeSubscriptions.length} assinaturas ativas`);\r\n      \r\n      if (activeSubscriptions.length === 0) {\r\n        throw new Error('Nenhuma assinatura ativa encontrada');\r\n      }\r\n\r\n      await generateInvoicesForActiveSubscriptions(month, year);\r\n      console.log('Faturas geradas com sucesso');\r\n    } catch (error) {\r\n      console.error('Erro ao gerar faturas:', error);\r\n      setError(error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const createExampleData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      console.log('Criando dados de exemplo...');\r\n      await createExampleDataService();\r\n      console.log('Dados de exemplo criados com sucesso');\r\n    } catch (error) {\r\n      console.error('Erro ao criar dados de exemplo:', error);\r\n      setError(error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const markInvoiceAsPaid = async (invoiceId) => {\r\n    try {\r\n      await updateInvoice(invoiceId, {\r\n        status: 'paid',\r\n        paidDate: new Date().toISOString()\r\n      });\r\n    } catch (error) {\r\n      console.error('Erro ao marcar fatura como paga:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const markInvoiceAsPending = async (invoiceId) => {\r\n    try {\r\n      await updateInvoice(invoiceId, {\r\n        status: 'pending',\r\n        paidDate: null\r\n      });\r\n    } catch (error) {\r\n      console.error('Erro ao marcar fatura como pendente:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  return {\r\n    // Estados\r\n    clients,\r\n    subscriptions,\r\n    invoices,\r\n    loading,\r\n    error,\r\n\r\n    // CRUD Clientes\r\n    createClient,\r\n    updateClient,\r\n    deleteClient,\r\n\r\n    // CRUD Assinaturas\r\n    createSubscription,\r\n    updateSubscription,\r\n    deleteSubscription,\r\n\r\n    // CRUD Faturas\r\n    createInvoice,\r\n    updateInvoice,\r\n    deleteInvoice,\r\n    markInvoiceAsPaid,\r\n    markInvoiceAsPending,\r\n\r\n    // Funções especializadas\r\n    generateInvoicesForMonth,\r\n    createExampleData\r\n  };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}