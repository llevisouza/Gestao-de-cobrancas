{"ast":null,"code":"// src/utils/formatters.js\n/**\r\n * Formatar valores monetários para o padrão brasileiro\r\n * @param {number} value - Valor a ser formatado\r\n * @returns {string} Valor formatado (ex: R$ 1.234,56)\r\n */export const formatCurrency=value=>{if(value===null||value===undefined||isNaN(value)){return'R$ 0,00';}return new Intl.NumberFormat('pt-BR',{style:'currency',currency:'BRL'}).format(value);};/**\r\n * Formatar datas para o padrão brasileiro\r\n * @param {Date|string} date - Data a ser formatada\r\n * @returns {string} Data formatada (ex: 20/09/2024)\r\n */export const formatDate=date=>{if(!date)return'';try{let dateObj;if(date instanceof Date){dateObj=date;}else if(typeof date==='string'){dateObj=new Date(date);}else if(date.toDate&&typeof date.toDate==='function'){// Firebase Timestamp\ndateObj=date.toDate();}else{return'';}// Verificar se a data é válida\nif(isNaN(dateObj.getTime())){return'';}return dateObj.toLocaleDateString('pt-BR');}catch(error){console.error('Erro ao formatar data:',error);return'';}};/**\r\n * Formatar telefone no padrão brasileiro\r\n * @param {string} phone - Telefone a ser formatado\r\n * @returns {string} Telefone formatado (ex: (11) 99999-9999)\r\n */export const formatPhone=phone=>{if(!phone)return'';// Remove todos os caracteres não numéricos\nconst numbers=phone.replace(/\\D/g,'');// Formatar conforme o tamanho\nif(numbers.length===11){// Celular: (11) 99999-9999\nreturn numbers.replace(/(\\d{2})(\\d{5})(\\d{4})/,'($1) $2-$3');}else if(numbers.length===10){// Fixo: (11) 9999-9999\nreturn numbers.replace(/(\\d{2})(\\d{4})(\\d{4})/,'($1) $2-$3');}return phone;};/**\r\n * Formatar CPF\r\n * @param {string} cpf - CPF a ser formatado\r\n * @returns {string} CPF formatado (ex: 123.456.789-00)\r\n */export const formatCPF=cpf=>{if(!cpf)return'';// Remove todos os caracteres não numéricos\nconst numbers=cpf.replace(/\\D/g,'');// Formatar CPF\nif(numbers.length===11){return numbers.replace(/(\\d{3})(\\d{3})(\\d{3})(\\d{2})/,'$1.$2.$3-$4');}return cpf;};/**\r\n * Formatar CNPJ\r\n * @param {string} cnpj - CNPJ a ser formatado\r\n * @returns {string} CNPJ formatado (ex: 12.345.678/0001-90)\r\n */export const formatCNPJ=cnpj=>{if(!cnpj)return'';// Remove todos os caracteres não numéricos\nconst numbers=cnpj.replace(/\\D/g,'');// Formatar CNPJ\nif(numbers.length===14){return numbers.replace(/(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})/,'$1.$2.$3/$4-$5');}return cnpj;};/**\r\n * Remover formatação de strings numéricas\r\n * @param {string} value - Valor formatado\r\n * @returns {string} Apenas números\r\n */export const removeFormatting=value=>{if(!value)return'';return value.replace(/\\D/g,'');};/**\r\n * Calcular dias entre duas datas\r\n * @param {Date|string} date1 - Data inicial\r\n * @param {Date|string} date2 - Data final\r\n * @returns {number} Número de dias\r\n */export const daysBetween=(date1,date2)=>{try{const d1=new Date(date1);const d2=new Date(date2);const diffTime=Math.abs(d2-d1);return Math.ceil(diffTime/(1000*60*60*24));}catch(error){console.error('Erro ao calcular diferença entre datas:',error);return 0;}};/**\r\n * Formatar número com separadores de milhares\r\n * @param {number} value - Valor numérico\r\n * @returns {string} Número formatado\r\n */export const formatNumber=value=>{if(value===null||value===undefined||isNaN(value)){return'0';}return new Intl.NumberFormat('pt-BR').format(value);};/**\r\n * Truncar texto\r\n * @param {string} text - Texto a ser truncado\r\n * @param {number} maxLength - Tamanho máximo\r\n * @returns {string} Texto truncado\r\n */export const truncateText=function(text){let maxLength=arguments.length>1&&arguments[1]!==undefined?arguments[1]:50;if(!text)return'';if(text.length<=maxLength)return text;return text.substring(0,maxLength)+'...';};/**\r\n * Capitalizar primeira letra\r\n * @param {string} text - Texto\r\n * @returns {string} Texto com primeira letra maiúscula\r\n */export const capitalize=text=>{if(!text)return'';return text.charAt(0).toUpperCase()+text.slice(1).toLowerCase();};/**\r\n * Validar email\r\n * @param {string} email - Email a ser validado\r\n * @returns {boolean} True se válido\r\n */export const isValidEmail=email=>{const emailRegex=/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;return emailRegex.test(email);};/**\r\n * Validar CPF\r\n * @param {string} cpf - CPF a ser validado\r\n * @returns {boolean} True se válido\r\n */export const isValidCPF=cpf=>{if(!cpf)return false;const numbers=cpf.replace(/\\D/g,'');if(numbers.length!==11)return false;if(/^(\\d)\\1{10}$/.test(numbers))return false;// CPFs inválidos como 111.111.111-11\n// Validação do dígito verificador\nlet sum=0;for(let i=0;i<9;i++){sum+=parseInt(numbers[i])*(10-i);}let digit=11-sum%11;if(digit>9)digit=0;if(parseInt(numbers[9])!==digit)return false;sum=0;for(let i=0;i<10;i++){sum+=parseInt(numbers[i])*(11-i);}digit=11-sum%11;if(digit>9)digit=0;if(parseInt(numbers[10])!==digit)return false;return true;};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}