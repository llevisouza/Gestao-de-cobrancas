{"ast":null,"code":"// src/utils/formatters.js\n\n/**\r\n * Formatar valores monetários para o padrão brasileiro\r\n * @param {number} value - Valor a ser formatado\r\n * @returns {string} Valor formatado (ex: R$ 1.234,56)\r\n */\nexport const formatCurrency = value => {\n  if (value === null || value === undefined || isNaN(value)) {\n    return 'R$ 0,00';\n  }\n  return new Intl.NumberFormat('pt-BR', {\n    style: 'currency',\n    currency: 'BRL'\n  }).format(value);\n};\n\n/**\r\n * Formatar datas para o padrão brasileiro\r\n * @param {Date|string} date - Data a ser formatada\r\n * @returns {string} Data formatada (ex: 20/09/2024)\r\n */\nexport const formatDate = date => {\n  if (!date) return '';\n  try {\n    let dateObj;\n    if (date instanceof Date) {\n      dateObj = date;\n    } else if (typeof date === 'string') {\n      dateObj = new Date(date);\n    } else if (date.toDate && typeof date.toDate === 'function') {\n      // Firebase Timestamp\n      dateObj = date.toDate();\n    } else {\n      return '';\n    }\n\n    // Verificar se a data é válida\n    if (isNaN(dateObj.getTime())) {\n      return '';\n    }\n    return dateObj.toLocaleDateString('pt-BR');\n  } catch (error) {\n    console.error('Erro ao formatar data:', error);\n    return '';\n  }\n};\n\n/**\r\n * Formatar telefone no padrão brasileiro\r\n * @param {string} phone - Telefone a ser formatado\r\n * @returns {string} Telefone formatado (ex: (11) 99999-9999)\r\n */\nexport const formatPhone = phone => {\n  if (!phone) return '';\n  // Remove todos os caracteres não numéricos\n  const numbers = phone.replace(/\\D/g, '');\n  // Formatar conforme o tamanho\n  if (numbers.length === 11) {\n    // Celular: (11) 99999-9999\n    return numbers.replace(/(\\d{2})(\\d{5})(\\d{4})/, '($1) $2-$3');\n  } else if (numbers.length === 10) {\n    // Fixo: (11) 9999-9999\n    return numbers.replace(/(\\d{2})(\\d{4})(\\d{4})/, '($1) $2-$3');\n  }\n  return phone;\n};\n\n/**\r\n * Formatar CPF\r\n * @param {string} cpf - CPF a ser formatado\r\n * @returns {string} CPF formatado (ex: 123.456.789-00)\r\n */\nexport const formatCPF = cpf => {\n  if (!cpf) return '';\n  // Remove todos os caracteres não numéricos\n  const numbers = cpf.replace(/\\D/g, '');\n  // Formatar CPF\n  if (numbers.length === 11) {\n    return numbers.replace(/(\\d{3})(\\d{3})(\\d{3})(\\d{2})/, '$1.$2.$3-$4');\n  }\n  return cpf;\n};\n\n/**\r\n * Formatar CNPJ\r\n * @param {string} cnpj - CNPJ a ser formatado\r\n * @returns {string} CNPJ formatado (ex: 12.345.678/0001-90)\r\n */\nexport const formatCNPJ = cnpj => {\n  if (!cnpj) return '';\n  // Remove todos os caracteres não numéricos\n  const numbers = cnpj.replace(/\\D/g, '');\n  // Formatar CNPJ\n  if (numbers.length === 14) {\n    return numbers.replace(/(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})/, '$1.$2.$3/$4-$5');\n  }\n  return cnpj;\n};\n\n/**\r\n * Remover formatação de strings numéricas\r\n * @param {string} value - Valor formatado\r\n * @returns {string} Apenas números\r\n */\nexport const removeFormatting = value => {\n  if (!value) return '';\n  return value.replace(/\\D/g, '');\n};\n\n/**\r\n * Calcular dias entre duas datas\r\n * @param {Date|string} date1 - Data inicial\r\n * @param {Date|string} date2 - Data final\r\n * @returns {number} Número de dias\r\n */\nexport const daysBetween = (date1, date2) => {\n  try {\n    const d1 = new Date(date1);\n    const d2 = new Date(date2);\n    const diffTime = Math.abs(d2 - d1);\n    return Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n  } catch (error) {\n    console.error('Erro ao calcular diferença entre datas:', error);\n    return 0;\n  }\n};\n\n/**\r\n * Formatar número com separadores de milhares\r\n * @param {number} value - Valor numérico\r\n * @returns {string} Número formatado\r\n */\nexport const formatNumber = value => {\n  if (value === null || value === undefined || isNaN(value)) {\n    return '0';\n  }\n  return new Intl.NumberFormat('pt-BR').format(value);\n};\n\n/**\r\n * Truncar texto\r\n * @param {string} text - Texto a ser truncado\r\n * @param {number} maxLength - Tamanho máximo\r\n * @returns {string} Texto truncado\r\n */\nexport const truncateText = (text, maxLength = 50) => {\n  if (!text) return '';\n  if (text.length <= maxLength) return text;\n  return text.substring(0, maxLength) + '...';\n};\n\n/**\r\n * Capitalizar primeira letra\r\n * @param {string} text - Texto\r\n * @returns {string} Texto com primeira letra maiúscula\r\n */\nexport const capitalize = text => {\n  if (!text) return '';\n  return text.charAt(0).toUpperCase() + text.slice(1).toLowerCase();\n};\n\n/**\r\n * Validar email\r\n * @param {string} email - Email a ser validado\r\n * @returns {boolean} True se válido\r\n */\nexport const isValidEmail = email => {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n};\n\n/**\r\n * Validar CPF\r\n * @param {string} cpf - CPF a ser validado\r\n * @returns {boolean} True se válido\r\n */\nexport const isValidCPF = cpf => {\n  if (!cpf) return false;\n  const numbers = cpf.replace(/\\D/g, '');\n  if (numbers.length !== 11) return false;\n  if (/^(\\d)\\1{10}$/.test(numbers)) return false; // CPFs inválidos como 111.111.111-11\n\n  // Validação do dígito verificador\n  let sum = 0;\n  for (let i = 0; i < 9; i++) {\n    sum += parseInt(numbers[i]) * (10 - i);\n  }\n  let digit = 11 - sum % 11;\n  if (digit > 9) digit = 0;\n  if (parseInt(numbers[9]) !== digit) return false;\n  sum = 0;\n  for (let i = 0; i < 10; i++) {\n    sum += parseInt(numbers[i]) * (11 - i);\n  }\n  digit = 11 - sum % 11;\n  if (digit > 9) digit = 0;\n  if (parseInt(numbers[10]) !== digit) return false;\n  return true;\n};","map":{"version":3,"names":["formatCurrency","value","undefined","isNaN","Intl","NumberFormat","style","currency","format","formatDate","date","dateObj","Date","toDate","getTime","toLocaleDateString","error","console","formatPhone","phone","numbers","replace","length","formatCPF","cpf","formatCNPJ","cnpj","removeFormatting","daysBetween","date1","date2","d1","d2","diffTime","Math","abs","ceil","formatNumber","truncateText","text","maxLength","substring","capitalize","charAt","toUpperCase","slice","toLowerCase","isValidEmail","email","emailRegex","test","isValidCPF","sum","i","parseInt","digit"],"sources":["C:/Users/LEVI/Desktop/Gestao de cobrancas/src/utils/formatters.js"],"sourcesContent":["// src/utils/formatters.js\r\n\r\n/**\r\n * Formatar valores monetários para o padrão brasileiro\r\n * @param {number} value - Valor a ser formatado\r\n * @returns {string} Valor formatado (ex: R$ 1.234,56)\r\n */\r\nexport const formatCurrency = (value) => {\r\n  if (value === null || value === undefined || isNaN(value)) {\r\n    return 'R$ 0,00';\r\n  }\r\n  \r\n  return new Intl.NumberFormat('pt-BR', {\r\n    style: 'currency',\r\n    currency: 'BRL'\r\n  }).format(value);\r\n};\r\n\r\n/**\r\n * Formatar datas para o padrão brasileiro\r\n * @param {Date|string} date - Data a ser formatada\r\n * @returns {string} Data formatada (ex: 20/09/2024)\r\n */\r\nexport const formatDate = (date) => {\r\n  if (!date) return '';\r\n  try {\r\n    let dateObj;\r\n    \r\n    if (date instanceof Date) {\r\n      dateObj = date;\r\n    } else if (typeof date === 'string') {\r\n      dateObj = new Date(date);\r\n    } else if (date.toDate && typeof date.toDate === 'function') {\r\n      // Firebase Timestamp\r\n      dateObj = date.toDate();\r\n    } else {\r\n      return '';\r\n    }\r\n\r\n    // Verificar se a data é válida\r\n    if (isNaN(dateObj.getTime())) {\r\n      return '';\r\n    }\r\n\r\n    return dateObj.toLocaleDateString('pt-BR');\r\n  } catch (error) {\r\n    console.error('Erro ao formatar data:', error);\r\n    return '';\r\n  }\r\n};\r\n\r\n/**\r\n * Formatar telefone no padrão brasileiro\r\n * @param {string} phone - Telefone a ser formatado\r\n * @returns {string} Telefone formatado (ex: (11) 99999-9999)\r\n */\r\nexport const formatPhone = (phone) => {\r\n  if (!phone) return '';\r\n  // Remove todos os caracteres não numéricos\r\n  const numbers = phone.replace(/\\D/g, '');\r\n  // Formatar conforme o tamanho\r\n  if (numbers.length === 11) {\r\n    // Celular: (11) 99999-9999\r\n    return numbers.replace(/(\\d{2})(\\d{5})(\\d{4})/, '($1) $2-$3');\r\n  } else if (numbers.length === 10) {\r\n    // Fixo: (11) 9999-9999\r\n    return numbers.replace(/(\\d{2})(\\d{4})(\\d{4})/, '($1) $2-$3');\r\n  }\r\n  \r\n  return phone;\r\n};\r\n\r\n/**\r\n * Formatar CPF\r\n * @param {string} cpf - CPF a ser formatado\r\n * @returns {string} CPF formatado (ex: 123.456.789-00)\r\n */\r\nexport const formatCPF = (cpf) => {\r\n  if (!cpf) return '';\r\n  // Remove todos os caracteres não numéricos\r\n  const numbers = cpf.replace(/\\D/g, '');\r\n  // Formatar CPF\r\n  if (numbers.length === 11) {\r\n    return numbers.replace(/(\\d{3})(\\d{3})(\\d{3})(\\d{2})/, '$1.$2.$3-$4');\r\n  }\r\n  \r\n  return cpf;\r\n};\r\n\r\n/**\r\n * Formatar CNPJ\r\n * @param {string} cnpj - CNPJ a ser formatado\r\n * @returns {string} CNPJ formatado (ex: 12.345.678/0001-90)\r\n */\r\nexport const formatCNPJ = (cnpj) => {\r\n  if (!cnpj) return '';\r\n  // Remove todos os caracteres não numéricos\r\n  const numbers = cnpj.replace(/\\D/g, '');\r\n  // Formatar CNPJ\r\n  if (numbers.length === 14) {\r\n    return numbers.replace(/(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})/, '$1.$2.$3/$4-$5');\r\n  }\r\n  \r\n  return cnpj;\r\n};\r\n\r\n/**\r\n * Remover formatação de strings numéricas\r\n * @param {string} value - Valor formatado\r\n * @returns {string} Apenas números\r\n */\r\nexport const removeFormatting = (value) => {\r\n  if (!value) return '';\r\n  return value.replace(/\\D/g, '');\r\n};\r\n\r\n/**\r\n * Calcular dias entre duas datas\r\n * @param {Date|string} date1 - Data inicial\r\n * @param {Date|string} date2 - Data final\r\n * @returns {number} Número de dias\r\n */\r\nexport const daysBetween = (date1, date2) => {\r\n  try {\r\n    const d1 = new Date(date1);\r\n    const d2 = new Date(date2);\r\n    const diffTime = Math.abs(d2 - d1);\r\n    return Math.ceil(diffTime / (1000 * 60 * 60 * 24));\r\n  } catch (error) {\r\n    console.error('Erro ao calcular diferença entre datas:', error);\r\n    return 0;\r\n  }\r\n};\r\n\r\n/**\r\n * Formatar número com separadores de milhares\r\n * @param {number} value - Valor numérico\r\n * @returns {string} Número formatado\r\n */\r\nexport const formatNumber = (value) => {\r\n  if (value === null || value === undefined || isNaN(value)) {\r\n    return '0';\r\n  }\r\n  \r\n  return new Intl.NumberFormat('pt-BR').format(value);\r\n};\r\n\r\n/**\r\n * Truncar texto\r\n * @param {string} text - Texto a ser truncado\r\n * @param {number} maxLength - Tamanho máximo\r\n * @returns {string} Texto truncado\r\n */\r\nexport const truncateText = (text, maxLength = 50) => {\r\n  if (!text) return '';\r\n  if (text.length <= maxLength) return text;\r\n  return text.substring(0, maxLength) + '...';\r\n};\r\n\r\n/**\r\n * Capitalizar primeira letra\r\n * @param {string} text - Texto\r\n * @returns {string} Texto com primeira letra maiúscula\r\n */\r\nexport const capitalize = (text) => {\r\n  if (!text) return '';\r\n  return text.charAt(0).toUpperCase() + text.slice(1).toLowerCase();\r\n};\r\n\r\n/**\r\n * Validar email\r\n * @param {string} email - Email a ser validado\r\n * @returns {boolean} True se válido\r\n */\r\nexport const isValidEmail = (email) => {\r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n  return emailRegex.test(email);\r\n};\r\n\r\n/**\r\n * Validar CPF\r\n * @param {string} cpf - CPF a ser validado\r\n * @returns {boolean} True se válido\r\n */\r\nexport const isValidCPF = (cpf) => {\r\n  if (!cpf) return false;\r\n  const numbers = cpf.replace(/\\D/g, '');\r\n  \r\n  if (numbers.length !== 11) return false;\r\n  if (/^(\\d)\\1{10}$/.test(numbers)) return false; // CPFs inválidos como 111.111.111-11\r\n  \r\n  // Validação do dígito verificador\r\n  let sum = 0;\r\n  for (let i = 0; i < 9; i++) {\r\n    sum += parseInt(numbers[i]) * (10 - i);\r\n  }\r\n  let digit = 11 - (sum % 11);\r\n  if (digit > 9) digit = 0;\r\n  if (parseInt(numbers[9]) !== digit) return false;\r\n  \r\n  sum = 0;\r\n  for (let i = 0; i < 10; i++) {\r\n    sum += parseInt(numbers[i]) * (11 - i);\r\n  }\r\n  digit = 11 - (sum % 11);\r\n  if (digit > 9) digit = 0;\r\n  if (parseInt(numbers[10]) !== digit) return false;\r\n  \r\n  return true;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}